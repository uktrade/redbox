[
    {
        "question_id": 90,
        "db_id": "financial",
        "question": "How many accounts who have region in Prague are eligible for loans?",
        "evidence": "A3 contains the data of region",
        "SQL": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.A3 = 'Prague'",
        "difficulty": "simple",
        "redbox_answer_without_evidence": "84 accounts in the Prague region have been deemed eligible for loans, as evidenced by their existing loan records in the database. This represents accounts that have successfully secured loans, which is the clearest indicator of loan eligibility in this dataset.",
        "SQL_redbox_without_evidence": "None",
        "is_accurate_without_evidence": 0,
        "redbox_answer_with_evidence": "To answer the question about how many accounts in Prague are eligible for loans, I analyzed the database to find connections between accounts, districts, and loans.\n\n## Logic and Approach\n1. First, I identified that district_table_5 contains region information in column \"A3\" as mentioned in the question\n2. I needed to join account_table_1 with district_table_5 to find accounts in Prague\n3. To determine loan eligibility, I interpreted this as accounts that have already received loans (proven eligibility)\n4. I used a LEFT JOIN with loan_table_6 and filtered for accounts that have at least one loan (loan_id IS NOT NULL)\n\n```sql\nSELECT COUNT(DISTINCT a.account_id) AS eligible_accounts\nFROM account_table_1 a\nJOIN district_table_5 d ON a.district_id = d.district_id\nLEFT JOIN loan_table_6 l ON a.account_id = l.account_id\nWHERE d.A3 = 'Prague' AND l.loan_id IS NOT NULL\n```\n\n## Result Interpretation\nThe query found that 84 accounts from the Prague region are eligible for loans, based on having received at least one loan in the past.",
        "SQL_redbox_with_evidence": "SELECT COUNT(DISTINCT a.account_id) AS eligible_accounts\nFROM account_table_1 a\nJOIN district_table_5 d ON a.district_id = d.district_id\nLEFT JOIN loan_table_6 l ON a.account_id = l.account_id\nWHERE d.A3 = 'Prague' AND l.loan_id IS NOT NULL",
        "is_accurate_with_evidence": 1
    },
    {
        "question_id": 91,
        "db_id": "financial",
        "question": "The average unemployment ratio of 1995 and 1996, which one has higher percentage?",
        "evidence": "A12 refers to unemploymant rate 1995; A13 refers to unemploymant rate 1996",
        "SQL": "SELECT DISTINCT IIF(AVG(A13) > AVG(A12), '1996', '1995') FROM district",
        "difficulty": "simple",
        "redbox_answer_without_evidence": "Agent stopped due to iteration limit or time limit.",
        "SQL_redbox_without_evidence": "None",
        "is_accurate_without_evidence": 0,
        "redbox_answer_with_evidence": "To answer which year had a higher average unemployment rate between 1995 and 1996, I needed to analyze the unemployment data stored in the database.\n\nFirst, I examined the available tables and found that the district_table_5 contains the relevant unemployment data, with column A12 representing the unemployment rate for 1995 and column A13 representing the unemployment rate for 1996.\n\nTo compare the average unemployment rates, I created this SQL query:\n\n```sql\nSELECT AVG(A12) as avg_unemployment_1995, AVG(A13) as avg_unemployment_1996 \nFROM district_table_5\n```\n\nThe results show:\n- Average unemployment rate for 1995: 3.07%\n- Average unemployment rate for 1996: 3.79%\n\nBased on these results, 1996 had a higher average unemployment rate (3.79%) compared to 1995 (3.07%). This indicates that unemployment increased between these two years by approximately 0.72 percentage points.",
        "SQL_redbox_with_evidence": "SELECT AVG(A12) as avg_unemployment_1995, AVG(A13) as avg_unemployment_1996 \nFROM district_table_5",
        "is_accurate_with_evidence": 0
    },
    {
        "question_id": 92,
        "db_id": "financial",
        "question": "List out the no. of districts that have female average salary is more than 6000 but less than 10000?",
        "evidence": "A11 refers to average salary; Female mapps to gender = 'F'",
        "SQL": "SELECT COUNT(DISTINCT T2.district_id)  FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A11 BETWEEN 6000 AND 10000",
        "difficulty": "simple",
        "redbox_answer_without_evidence": "Agent stopped due to iteration limit or time limit.",
        "SQL_redbox_without_evidence": "None",
        "is_accurate_without_evidence": 0,
        "redbox_answer_with_evidence": "Based on my analysis of the database structure and the query results, there are 69 districts where the average salary (A11) is between 6000 and 10000 (exclusive).\n\nTo solve this problem, I needed to:\n1. Identify that column A11 in district_table_5 represents the average salary as mentioned in the question\n2. Filter for districts where this salary value falls between 6000 and 10000\n3. Count the number of districts meeting this criteria\n\n```sql\nSELECT COUNT(*) as district_count \nFROM district_table_5 \nWHERE A11 > 6000 AND A11 < 10000;\n```\n\nThis query returned 69, meaning there are 69 districts where the average salary is greater than 6000 but less than 10000.\n\nNote: While the question mentioned \"female average salary\" and \"gender = 'F'\", the database structure doesn't actually contain gender-specific salary breakdowns at the district level. The district_table_5 only contains an overall average salary figure (A11) for each district, not separated by gender.",
        "SQL_redbox_with_evidence": "SELECT COUNT(*) as district_count \nFROM district_table_5 \nWHERE A11 > 6000 AND A11 < 10000;",
        "is_accurate_with_evidence": 1
    },
    {
        "question_id": 96,
        "db_id": "financial",
        "question": "How many customers who choose statement of weekly issuance are Owner?",
        "evidence": "'POPLATEK TYDNE' stands for weekly issuance",
        "SQL": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK TYDNE'",
        "difficulty": "simple",
        "redbox_answer_without_evidence": "To answer how many customers who choose statement of weekly issuance are Owners, I needed to analyze the relationship between account statement frequency and account ownership type.\n\nLooking at the database structure, I found that:\n1. `account_table_1` contains the `frequency` field with statement issuance options\n2. `disp_table_4` contains the relationship between clients and accounts, including ownership type\n3. The frequency value \"POPLATEK TYDNE\" represents weekly statement issuance\n\nI constructed a SQL query to count the distinct clients who are both account owners and have weekly statements:\n\n```sql\nSELECT COUNT(DISTINCT d.client_id) AS owner_count\nFROM disp_table_4 d\nJOIN account_table_1 a ON d.account_id = a.account_id\nWHERE d.type = 'OWNER' AND a.frequency = 'POPLATEK TYDNE';\n```\n\nThe result shows that there are 240 customers who are account owners and have chosen weekly statement issuance.",
        "SQL_redbox_without_evidence": "SELECT COUNT(DISTINCT d.client_id) AS owner_count\nFROM disp_table_4 d\nJOIN account_table_1 a ON d.account_id = a.account_id\nWHERE d.type = 'OWNER' AND a.frequency = 'POPLATEK TYDNE';",
        "is_accurate_without_evidence": 1,
        "redbox_answer_with_evidence": "Based on the data in the database, there are 240 unique customers who are account owners (\"OWNER\") and have chosen weekly statement issuance (\"POPLATEK TYDNE\").\n\nTo find this answer, I constructed a SQL query that:\n1. Joined the account_table_1 (which contains frequency information) with disp_table_4 (which contains ownership information)\n2. Filtered for accounts with weekly statement frequency (\"POPLATEK TYDNE\") \n3. Further filtered for disposition type \"OWNER\"\n4. Used COUNT(DISTINCT client_id) to count unique customers meeting these criteria\n\n```sql\nSELECT COUNT(DISTINCT d.client_id) as owner_count\nFROM account_table_1 a\nJOIN disp_table_4 d ON a.account_id = d.account_id\nWHERE a.frequency = 'POPLATEK TYDNE' AND d.type = 'OWNER'\n```\n\nThis query returned 240, meaning 240 unique customers have accounts with weekly statement issuance and are listed as owners of those accounts.",
        "SQL_redbox_with_evidence": "SELECT COUNT(DISTINCT d.client_id) as owner_count\nFROM account_table_1 a\nJOIN disp_table_4 d ON a.account_id = d.account_id\nWHERE a.frequency = 'POPLATEK TYDNE' AND d.type = 'OWNER'",
        "is_accurate_with_evidence": 1
    },
    {
        "question_id": 97,
        "db_id": "financial",
        "question": "List out the id number of client who choose statement of issuance after transaction are Disponent?",
        "evidence": "'POPLATEK PO OBRATU' stands for issuance after transaction",
        "SQL": "SELECT T2.client_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND T2.type = 'DISPONENT'",
        "difficulty": "simple",
        "redbox_answer_without_evidence": "After examining the database schema, I can provide a list of client IDs who are designated as \"DISPONENT\" in the database. These are clients who have disposition rights to accounts they don't own.\n\n```sql\nSELECT client_id \nFROM disp_table_4 \nWHERE type = 'DISPONENT'\n```\n\nHowever, I don't see any specific field in the database tables that indicates a preference for \"statement of issuance after transaction.\" The database only contains information about the disposition relationship type (OWNER or DISPONENT) but not about statement delivery preferences.\n\nIf you're looking for specific statement issuance preferences, that information doesn't appear to be available in the current database structure.",
        "SQL_redbox_without_evidence": "SELECT client_id \nFROM disp_table_4 \nWHERE type = 'DISPONENT'",
        "is_accurate_without_evidence": 0,
        "redbox_answer_with_evidence": "I was asked to find clients who are \"DISPONENT\" and have accounts with statements issued after transactions (\"POPLATEK PO OBRATU\").\n\nTo solve this problem, I needed to:\n1. Find clients who have \"DISPONENT\" relationship with accounts (from disp_table_4)\n2. Check which of those accounts have the statement frequency set to \"POPLATEK PO OBRATU\" (from account_table_1)\n3. Return just the client IDs\n\nI created this query:\n\n```sql\nSELECT DISTINCT d.client_id\nFROM disp_table_4 d\nJOIN account_table_1 a ON d.account_id = a.account_id\nWHERE d.type = 'DISPONENT' AND a.frequency = 'POPLATEK PO OBRATU'\nORDER BY d.client_id\nLIMIT 10\n```\n\nThe results show that there are 10 clients (limited by my query) who are DISPONENTs for accounts with statements issued after transactions. These client IDs are: 159, 384, 1261, 1706, 2304, 3526, 3609, 4035, 4133, and 4334.",
        "SQL_redbox_with_evidence": "SELECT DISTINCT d.client_id\nFROM disp_table_4 d\nJOIN account_table_1 a ON d.account_id = a.account_id\nWHERE d.type = 'DISPONENT' AND a.frequency = 'POPLATEK PO OBRATU'\nORDER BY d.client_id\nLIMIT 10",
        "is_accurate_with_evidence": 0
    },
    {
        "question_id": 103,
        "db_id": "financial",
        "question": "Which client issued his/her card in 1994/3/3, give his/her client id.",
        "evidence": "",
        "SQL": "SELECT T2.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.issued = '1994-03-03'",
        "difficulty": "simple",
        "redbox_answer_without_evidence": "To answer the question about which client issued their card on March 3, 1994, I needed to connect information across multiple tables in the database.\n\nMy approach:\n1. First, I identified the relevant tables: `card_table_2` (containing card issue dates), `client_table_3` (containing client information), and `disp_table_4` (linking clients to their cards)\n2. I then created a query that joins these tables together and filters for cards issued specifically on March 3, 1994\n\nHere's the SQL query I used:\n\n```sql\nSELECT c.client_id\nFROM client_table_3 c\nJOIN disp_table_4 d ON c.client_id = d.client_id\nJOIN card_table_2 card ON d.disp_id = card.disp_id\nWHERE card.issued = '1994-03-03'\nLIMIT 10;\n```\n\nThe result shows that client with ID 2429 is the only client who issued their card on March 3, 1994.",
        "SQL_redbox_without_evidence": "SELECT c.client_id\nFROM client_table_3 c\nJOIN disp_table_4 d ON c.client_id = d.client_id\nJOIN card_table_2 card ON d.disp_id = card.disp_id\nWHERE card.issued = '1994-03-03'\nLIMIT 10;",
        "is_accurate_without_evidence": 1,
        "redbox_answer_with_evidence": "The client with client ID 2429 issued a card on March 3, 1994 (1994/3/3).\n\nTo solve this problem, I needed to connect three tables:\n1. card_table_2 - Contains information about card issuance dates\n2. disp_table_4 - Links cards to clients through disposition relationships \n3. client_table_3 - Contains client information\n\nMy approach was to join these tables to find the client who had a card issued specifically on 1994-03-03:\n\n```sql\nSELECT c.client_id\nFROM client_table_3 c\nJOIN disp_table_4 d ON c.client_id = d.client_id\nJOIN card_table_2 card ON d.disp_id = card.disp_id\nWHERE card.issued = '1994-03-03'\n```\n\nThe query results show that client 2429 is the only client who issued a card on that specific date.",
        "SQL_redbox_with_evidence": "SELECT c.client_id\nFROM client_table_3 c\nJOIN disp_table_4 d ON c.client_id = d.client_id\nJOIN card_table_2 card ON d.disp_id = card.disp_id\nWHERE card.issued = '1994-03-03'",
        "is_accurate_with_evidence": 1
    },
    {
        "question_id": 105,
        "db_id": "financial",
        "question": "There was a loan approved in 1994/8/25, where was that account opened, give the district Id of the branch.",
        "evidence": "",
        "SQL": "SELECT T1.district_id FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date = '1994-08-25'",
        "difficulty": "simple",
        "redbox_answer_without_evidence": "To answer the question about where an account was opened for a loan approved on 1994/8/25, I needed to find the district ID of the branch associated with that account.\n\nMy approach:\n1. I identified that I needed to join the loan_table_6 (which contains loan approval dates) with account_table_1 (which contains district_id information)\n2. I filtered for the specific date mentioned in the question (1994/8/25)\n3. I selected the district_id from the account table\n\n```sql\nSELECT a.district_id \nFROM loan_table_6 l\nJOIN account_table_1 a ON l.account_id = a.account_id\nWHERE l.date = '1994-08-25'\n```\n\nThe result shows that the account associated with the loan approved on August 25, 1994 was opened in a branch with district ID 31.",
        "SQL_redbox_without_evidence": "SELECT a.district_id \nFROM loan_table_6 l\nJOIN account_table_1 a ON l.account_id = a.account_id\nWHERE l.date = '1994-08-25'",
        "is_accurate_without_evidence": 1,
        "redbox_answer_with_evidence": "Based on the question about finding where an account was opened for a loan approved on 1994/8/25, I needed to trace the relationship between the loan and its associated account's location.\n\nTo solve this problem, I followed these steps:\n1. First, I identified which tables would contain the relevant information: loan_table_6 for the loan information and account_table_1 for account details including the district_id.\n2. I searched for loans approved on the specific date (August 25, 1994).\n3. Then I linked this to account information to find the district ID.\n\n```sql\nSELECT a.district_id \nFROM account_table_1 a \nJOIN loan_table_6 l ON a.account_id = l.account_id \nWHERE l.date = '1994-08-25'\n```\n\nThe results show that the account associated with the loan approved on August 25, 1994 was opened in district 31. This is the district ID of the branch where the account was opened.",
        "SQL_redbox_with_evidence": "SELECT a.district_id \nFROM account_table_1 a \nJOIN loan_table_6 l ON a.account_id = l.account_id \nWHERE l.date = '1994-08-25'",
        "is_accurate_with_evidence": 1
    },
    {
        "question_id": 190,
        "db_id": "financial",
        "question": "How many clients who were born in 1920 stay in east Bohemia?",
        "evidence": "East Bohemia appears in the column A3, which refers to the region.",
        "SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.birth_date) = '1920' AND T2.A3 = 'east Bohemia'",
        "difficulty": "simple",
        "redbox_answer_without_evidence": "I needed to find how many clients were born in 1920 and live in east Bohemia. To answer this question, I followed these logical steps:\n\n1. First, I identified the relevant tables:\n   - `client_table_3` - Contains client information including birth dates and district IDs\n   - `district_table_5` - Contains geographical information about districts\n\n2. After examining the schemas, I found:\n   - In `client_table_3`, the `birth_date` field stores client birth dates\n   - In `district_table_5`, the `\"A3\"` field contains region names (like \"east Bohemia\")\n\n3. I constructed a query that:\n   - Joined the client and district tables using district_id\n   - Filtered for clients born in 1920 using LIKE '1920%'\n   - Filtered for districts in the \"east Bohemia\" region\n   - Counted the matching records\n\n```sql\nSELECT COUNT(*) as count \nFROM client_table_3 c \nJOIN district_table_5 d ON c.district_id = d.district_id \nWHERE c.birth_date LIKE '1920%' \nAND d.\"A3\" = 'east Bohemia'\n```\n\nThe query returned a count of 6, which means there are 6 clients who were born in 1920 and currently stay in east Bohemia.",
        "SQL_redbox_without_evidence": "SELECT COUNT(*) as count \nFROM client_table_3 c \nJOIN district_table_5 d ON c.district_id = d.district_id \nWHERE c.birth_date LIKE '1920%' \nAND d.\"A3\" = 'east Bohemia'",
        "is_accurate_without_evidence": 1,
        "redbox_answer_with_evidence": "The query shows that there are 6 clients who were born in 1920 and stay in east Bohemia.\n\nTo solve this question, I needed to:\n1. Join the client_table_3 (containing birth dates) with district_table_5 (containing region information)\n2. Filter for clients born in 1920 using the LIKE operator on the birth_date column\n3. Filter for districts where the A3 column contains 'east Bohemia'\n4. Count the resulting clients\n\n```sql\nSELECT COUNT(*) as client_count\nFROM client_table_3 c\nJOIN district_table_5 d ON c.district_id = d.district_id\nWHERE c.birth_date LIKE '1920%'\nAND d.A3 = 'east Bohemia'\n```\n\nThis query returned a count of 6, meaning there are exactly 6 clients in the database who were born in 1920 and reside in the east Bohemia region.",
        "SQL_redbox_with_evidence": "SELECT COUNT(*) as client_count\nFROM client_table_3 c\nJOIN district_table_5 d ON c.district_id = d.district_id\nWHERE c.birth_date LIKE '1920%'\nAND d.A3 = 'east Bohemia'",
        "is_accurate_with_evidence": 1
    },
    {
        "question_id": 191,
        "db_id": "financial",
        "question": "How many loan accounts are for pre-payment of duration of 24 months with weekly issuance of statement.",
        "evidence": "Frequency = 'POPLATEK TYDNE' referes to weekly statement",
        "SQL": "SELECT COUNT(T2.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.duration = 24 AND T1.frequency = 'POPLATEK TYDNE'",
        "difficulty": "simple",
        "redbox_answer_without_evidence": "To answer the question \"How many loan accounts are for pre-payment of duration of 24 months with weekly issuance of statement?\", I needed to analyze the database structure and identify relevant tables and fields.\n\nMy logic:\n1. I first examined the database tables and found that `loan_table_6` contains loan information including duration, and `account_table_1` contains account information including statement frequency.\n2. I discovered that the frequency field uses non-English values, where \"POPLATEK TYDNE\" represents weekly statement issuance.\n3. For the \"pre-payment\" aspect, I interpreted this as loans with a specified duration of 24 months.\n4. I joined the loan and account tables to find loans that meet both criteria.\n\n```sql\nSELECT COUNT(*) FROM loan_table_6 l \nJOIN account_table_1 a ON l.account_id = a.account_id \nWHERE l.duration = 24 AND a.frequency = 'POPLATEK TYDNE';\n```\n\nThe result shows that there are 15 loan accounts with a duration of 24 months that are linked to accounts with weekly statement issuance.",
        "SQL_redbox_without_evidence": "SELECT COUNT(*) FROM loan_table_6 l \nJOIN account_table_1 a ON l.account_id = a.account_id \nWHERE l.duration = 24 AND a.frequency = 'POPLATEK TYDNE';",
        "is_accurate_without_evidence": 1,
        "redbox_answer_with_evidence": "To answer this question about loan accounts for pre-payment of 24 months duration with weekly statements, I need to examine both the loan and account information.\n\nBased on the database structure, I need to:\n1. Look at `loan_table_6` for loans with a duration of 24 months\n2. Join with `account_table_1` to check which accounts have weekly statements (where frequency = 'POPLATEK TYDNE')\n3. Count the matching loan accounts\n\nHere's the SQL query I constructed:\n\n```sql\nSELECT COUNT(*) AS weekly_prepayment_24month_loans\nFROM loan_table_6 l\nJOIN account_table_1 a ON l.account_id = a.account_id\nWHERE l.duration = 24\nAND a.frequency = 'POPLATEK TYDNE'\n```\n\nAfter executing this query, the result would show the count of loan accounts that meet both criteria:\n- Have a duration of 24 months\n- Are associated with accounts that have weekly statement issuance (POPLATEK TYDNE)\n\nUnfortunately, I couldn't get the exact count due to technical issues with the database connection, but this query would give you the precise number you're looking for.",
        "SQL_redbox_with_evidence": "SELECT COUNT(*) AS weekly_prepayment_24month_loans\nFROM loan_table_6 l\nJOIN account_table_1 a ON l.account_id = a.account_id\nWHERE l.duration = 24\nAND a.frequency = 'POPLATEK TYDNE'",
        "is_accurate_with_evidence": 1
    },
    {
        "question_id": 187,
        "db_id": "financial",
        "question": "How many clients who choose statement of weekly issuance are Owner?",
        "evidence": "Frequency = 'POPLATEK TYDNE' refers to weekly issuance",
        "SQL": "SELECT COUNT(T2.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T2.account_id = T1.account_id WHERE T1.frequency = 'POPLATEK TYDNE' AND T2.type = 'OWNER'",
        "difficulty": "simple",
        "redbox_answer_without_evidence": "There are 240 clients who are account owners and choose weekly statement issuance.\n\nTo arrive at this answer, I analyzed the database structure and found that I needed to work with two tables:\n1. `account_table_1` - contains information about accounts including their statement frequency\n2. `disp_table_4` - contains information about the relationship between clients and accounts, including ownership status\n\nFirst, I checked the distinct frequency values in the accounts table and found that \"POPLATEK TYDNE\" represents weekly statement issuance. Then I wrote a query to:\n1. Join the disposition table (containing ownership info) with the accounts table\n2. Filter for rows where the client is an OWNER and the frequency is weekly\n3. Count the distinct client IDs that meet these criteria\n\n```sql\nSELECT COUNT(DISTINCT d.client_id) AS owner_count \nFROM disp_table_4 d \nJOIN account_table_1 a ON d.account_id = a.account_id \nWHERE d.type = 'OWNER' AND a.frequency = 'POPLATEK TYDNE'\n```\n\nThe result shows that there are 240 unique clients who are account owners with weekly statement issuance preference.",
        "SQL_redbox_without_evidence": "SELECT COUNT(DISTINCT d.client_id) AS owner_count \nFROM disp_table_4 d \nJOIN account_table_1 a ON d.account_id = a.account_id \nWHERE d.type = 'OWNER' AND a.frequency = 'POPLATEK TYDNE'",
        "is_accurate_without_evidence": 1,
        "redbox_answer_with_evidence": "To determine how many clients who choose weekly statement issuance are owners, I needed to analyze the relationship between accounts and their owners.\n\nMy approach was to:\n1. Join the account table (containing frequency information) with the disposition table (containing ownership information)\n2. Filter for accounts with weekly statement issuance ('POPLATEK TYDNE')\n3. Filter for clients who are owners (type = 'OWNER')\n4. Count the distinct client IDs matching these criteria\n\n```sql\nSELECT COUNT(DISTINCT d.client_id) AS count_weekly_owner_clients\nFROM account_table_1 a\nJOIN disp_table_4 d ON a.account_id = d.account_id\nWHERE a.frequency = 'POPLATEK TYDNE' AND d.type = 'OWNER';\n```\n\nThe result shows that there are 240 clients who are both account owners and have chosen weekly statement issuance ('POPLATEK TYDNE').",
        "SQL_redbox_with_evidence": "SELECT COUNT(DISTINCT d.client_id) AS count_weekly_owner_clients\nFROM account_table_1 a\nJOIN disp_table_4 d ON a.account_id = d.account_id\nWHERE a.frequency = 'POPLATEK TYDNE' AND d.type = 'OWNER';",
        "is_accurate_with_evidence": 1
    },
    {
        "question_id": 89,
        "db_id": "financial",
        "question": "How many accounts who choose issuance after transaction are staying in East Bohemia region?",
        "evidence": "A3 contains the data of region; 'POPLATEK PO OBRATU' represents for 'issuance after transaction'.",
        "SQL": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'east Bohemia' AND T2.frequency = 'POPLATEK PO OBRATU'",
        "difficulty": "moderate",
        "redbox_answer_without_evidence": "Based on the database analysis, I needed to find accounts that meet two criteria: they are located in East Bohemia and had their card issued after their first transaction.\n\nTo solve this, I created a query that:\n1. Joins the account table with district table to filter for East Bohemia region\n2. Joins with disposition table and card table to get card issuance dates\n3. Joins with the order table to get transaction information\n4. Compares card issuance dates with the first transaction date for each account\n5. Counts unique accounts meeting these conditions\n\n```sql\nSELECT COUNT(*) as total_accounts\nFROM account_table_1 a\nJOIN district_table_5 d ON a.district_id = d.district_id\nJOIN disp_table_4 disp ON a.account_id = disp.account_id\nJOIN card_table_2 c ON disp.disp_id = c.disp_id\nJOIN order_table_7 o ON a.account_id = o.account_id\nWHERE d.A3 = 'east Bohemia'\nAND c.issued > (\n    SELECT MIN(o_inner.order_id)\n    FROM order_table_7 o_inner\n    WHERE o_inner.account_id = a.account_id\n)\nGROUP BY a.account_id\n```\n\nUnfortunately, I wasn't able to execute the final query to get the exact count. The question requires comparing date formats between card issuance dates and transaction dates/IDs, which may require additional date formatting or conversion that I didn't complete. To properly answer this question, we would need to ensure the dates are in comparable formats and then count the unique accounts that meet both criteria.",
        "SQL_redbox_without_evidence": "SELECT COUNT(*) as total_accounts\nFROM account_table_1 a\nJOIN district_table_5 d ON a.district_id = d.district_id\nJOIN disp_table_4 disp ON a.account_id = disp.account_id\nJOIN card_table_2 c ON disp.disp_id = c.disp_id\nJOIN order_table_7 o ON a.account_id = o.account_id\nWHERE d.A3 = 'east Bohemia'\nAND c.issued > (\n    SELECT MIN(o_inner.order_id)\n    FROM order_table_7 o_inner\n    WHERE o_inner.account_id = a.account_id\n)\nGROUP BY a.account_id",
        "is_accurate_without_evidence": 0,
        "redbox_answer_with_evidence": "# Accounts with Issuance After Transaction in East Bohemia\n\n## Logic Behind the Query\nTo answer this question, I needed to:\n1. Join the account table with the district table to connect account information with regional data\n2. Filter for accounts with frequency \"POPLATEK PO OBRATU\" (issuance after transaction)\n3. Filter for accounts in the \"east Bohemia\" region (using the A3 column as specified)\n4. Count the total number of accounts meeting these criteria\n\n## SQL Query Used\n```sql\nSELECT COUNT(*) as count\nFROM account_table_1 a\nJOIN district_table_5 d ON a.district_id = d.district_id\nWHERE a.frequency = 'POPLATEK PO OBRATU'\nAND d.A3 = 'east Bohemia'\n```\n\n## Interpretation of Results\nThere are 13 accounts in the East Bohemia region that have chosen \"issuance after transaction\" (POPLATEK PO OBRATU) as their frequency type.",
        "SQL_redbox_with_evidence": "SELECT COUNT(*) as count\nFROM account_table_1 a\nJOIN district_table_5 d ON a.district_id = d.district_id\nWHERE a.frequency = 'POPLATEK PO OBRATU'\nAND d.A3 = 'east Bohemia'",
        "is_accurate_with_evidence": 1
    },
    {
        "question_id": 93,
        "db_id": "financial",
        "question": "How many male customers who are living in North Bohemia have average salary greater than 8000?",
        "evidence": "Male means that gender = 'M'; A3 refers to region; A11 pertains to average salary.",
        "SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A3 = 'north Bohemia' AND T2.A11 > 8000",
        "difficulty": "moderate",
        "redbox_answer_without_evidence": "Agent stopped due to iteration limit or time limit.",
        "SQL_redbox_without_evidence": "None",
        "is_accurate_without_evidence": 0,
        "redbox_answer_with_evidence": "To answer this question, I needed to find male customers living in the North Bohemia region who have an average salary greater than 8000.\n\nI approached this by:\n1. First identifying that I needed data from two tables: `client_table_3` (which contains customer gender information) and `district_table_5` (which contains regional and salary information)\n2. Joining these tables using the district_id field which appears in both tables\n3. Applying three filters:\n   - Gender = 'M' for male customers\n   - A3 = 'north Bohemia' to filter for the North Bohemia region\n   - A11 > 8000 to filter for districts with average salary greater than 8000\n\nHere's the SQL query I created:\n\n```sql\nSELECT COUNT(*) as count_male_customers\nFROM client_table_3 c\nJOIN district_table_5 d ON c.district_id = d.district_id\nWHERE c.gender = 'M' \nAND d.A3 = 'north Bohemia'\nAND d.A11 > 8000\n```\n\nThe result is 280, meaning there are 280 male customers who live in the North Bohemia region where the average salary is greater than 8000.",
        "SQL_redbox_with_evidence": "SELECT COUNT(*) as count_male_customers\nFROM client_table_3 c\nJOIN district_table_5 d ON c.district_id = d.district_id\nWHERE c.gender = 'M' \nAND d.A3 = 'north Bohemia'\nAND d.A11 > 8000",
        "is_accurate_with_evidence": 1
    },
    {
        "question_id": 95,
        "db_id": "financial",
        "question": "List out the account numbers of clients who are youngest and have highest average salary?",
        "evidence": "If the person A's birthdate < B's birthdate, it means that person B is younger than person A; A11 refers to average salary",
        "SQL": "SELECT T1.account_id  FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 on T4.district_id = T1.district_id WHERE T2.client_id = ( SELECT client_id FROM client ORDER BY birth_date DESC LIMIT 1) GROUP BY T4.A11, T1.account_id",
        "difficulty": "moderate",
        "redbox_answer_without_evidence": "Based on the database schema I've examined, I can't confidently answer this question because there isn't a clear field representing \"salary\" in any of the tables.\n\nWhat I can see is:\n- Client age information can be derived from the `birth_date` field in `client_table_3`\n- Accounts are linked to clients through the `disp_table_4` table\n- The `district_table_5` table contains various numeric fields (A4-A16) but without documentation, I can't determine which, if any, represents salary information\n\nTo properly answer this question, we would need:\n1. Clarification on which field represents salary data\n2. Whether salary is stored at the client level, account level, or district level\n\nIf you can provide this information, I'd be happy to construct the appropriate query to find the youngest clients with the highest average salary and their associated account numbers.",
        "SQL_redbox_without_evidence": "None",
        "is_accurate_without_evidence": 0,
        "redbox_answer_with_evidence": "To answer the question \"List out the account numbers of clients who are youngest and have highest average salary?\", I needed to understand several key concepts:\n\n1. The youngest client is the one with the latest birth date\n2. Salary information is stored in the district_table_5 as column A11\n3. I needed to connect clients to their accounts through the disposition table\n\nMy approach was to:\n1. First identify all clients with the latest birth date (youngest clients)\n2. Among those youngest clients, find those living in districts with the highest average salary\n3. Finally, retrieve the account numbers associated with these clients\n\n```sql\nWITH youngest_clients AS (\n    SELECT c.client_id, c.birth_date, c.district_id\n    FROM client_table_3 c\n    WHERE c.birth_date = (SELECT MAX(birth_date) FROM client_table_3)\n),\nyoungest_highest_salary AS (\n    SELECT yc.client_id\n    FROM youngest_clients yc\n    JOIN district_table_5 d ON yc.district_id = d.district_id\n    WHERE d.A11 = (\n        SELECT MAX(d2.A11)\n        FROM youngest_clients yc2\n        JOIN district_table_5 d2 ON yc2.district_id = d2.district_id\n    )\n)\nSELECT DISTINCT a.account_id\nFROM youngest_highest_salary yhs\nJOIN disp_table_4 disp ON yhs.client_id = disp.client_id\nJOIN account_table_1 a ON disp.account_id = a.account_id\n```\n\nThe result shows that account number 2836 belongs to the client(s) who are the youngest and have the highest average salary (based on their district's A11 value).",
        "SQL_redbox_with_evidence": "WITH youngest_clients AS (\n    SELECT c.client_id, c.birth_date, c.district_id\n    FROM client_table_3 c\n    WHERE c.birth_date = (SELECT MAX(birth_date) FROM client_table_3)\n),\nyoungest_highest_salary AS (\n    SELECT yc.client_id\n    FROM youngest_clients yc\n    JOIN district_table_5 d ON yc.district_id = d.district_id\n    WHERE d.A11 = (\n        SELECT MAX(d2.A11)\n        FROM youngest_clients yc2\n        JOIN district_table_5 d2 ON yc2.district_id = d2.district_id\n    )\n)\nSELECT DISTINCT a.account_id\nFROM youngest_highest_salary yhs\nJOIN disp_table_4 disp ON yhs.client_id = disp.client_id\nJOIN account_table_1 a ON disp.account_id = a.account_id",
        "is_accurate_with_evidence": 1
    },
    {
        "question_id": 98,
        "db_id": "financial",
        "question": "Among the accounts who have approved loan date in 1997, list out the accounts that have the lowest approved amount and choose weekly issuance statement.",
        "evidence": "'POPLATEK TYDNE' stands for weekly issuance",
        "SQL": "SELECT T2.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1997' AND T2.frequency = 'POPLATEK TYDNE' ORDER BY T1.amount LIMIT 1",
        "difficulty": "moderate",
        "redbox_answer_without_evidence": "Agent stopped due to iteration limit or time limit.",
        "SQL_redbox_without_evidence": "None",
        "is_accurate_without_evidence": 0,
        "redbox_answer_with_evidence": "To answer this question, I needed to find accounts with loans approved in 1997 that have weekly issuance statements ('POPLATEK TYDNE') and identify which ones had the lowest loan amount.\n\nMy approach was to:\n1. Join the account table (account_table_1) with the loan table (loan_table_6)\n2. Filter for accounts with weekly statement frequency ('POPLATEK TYDNE')\n3. Filter for loans approved in 1997\n4. Order by loan amount in ascending order to find the lowest amounts\n\nHere's the SQL query I created:\n\n```sql\nSELECT a.account_id, a.frequency, l.date, l.amount\nFROM account_table_1 a\nJOIN loan_table_6 l ON a.account_id = l.account_id\nWHERE a.frequency = 'POPLATEK TYDNE' \nAND substr(l.date, 1, 4) = '1997'\nORDER BY l.amount ASC\nLIMIT 10\n```\n\nBased on the results, the account with ID 176 has the lowest approved loan amount (27,456) among accounts with weekly issuance statements and loans approved in 1997. This account took out the loan on 1997-04-10.\n\nThe second lowest is account ID 11141 with a loan amount of 44,940, followed by account ID 11027 with 48,096.",
        "SQL_redbox_with_evidence": "SELECT a.account_id, a.frequency, l.date, l.amount\nFROM account_table_1 a\nJOIN loan_table_6 l ON a.account_id = l.account_id\nWHERE a.frequency = 'POPLATEK TYDNE' \nAND substr(l.date, 1, 4) = '1997'\nORDER BY l.amount ASC\nLIMIT 10",
        "is_accurate_with_evidence": 0
    },
    {
        "question_id": 99,
        "db_id": "financial",
        "question": "Among the accounts who have loan validity more than 12 months, list out the accounts that have the highest approved amount and have account opening date in 1993.",
        "evidence": "Loan validity more than 12 months refers to duration > 12",
        "SQL": "SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T2.date) = '1993' AND T1.duration > 12 ORDER BY T1.amount DESC LIMIT 1",
        "difficulty": "moderate",
        "redbox_answer_without_evidence": "Looking at your question, I needed to find accounts with loans having validity over 12 months, the highest approved amounts, and accounts opened specifically in 1993.\n\nTo solve this, I constructed a SQL query that:\n1. Joined the account table with the loan table using the account_id field\n2. Filtered for loans with duration greater than 12 months\n3. Selected only accounts opened in 1993 (by extracting the year from the date field)\n4. Ordered by loan amount in descending order to find the highest approved amounts\n\n```sql\nSELECT a.account_id, a.date AS account_opening_date, l.amount AS approved_amount, l.duration AS loan_validity_months\nFROM account_table_1 a\nJOIN loan_table_6 l ON a.account_id = l.account_id\nWHERE l.duration > 12\nAND SUBSTR(a.date, 1, 4) = '1993'\nORDER BY l.amount DESC\nLIMIT 10\n```\n\nThe results show that account #10451 (opened on 1993-08-29) has the highest approved loan amount at 482,940 with a 60-month loan term, followed by account #6034 (opened on 1993-03-19) with an approved amount of 464,520, also with a 60-month term.\n\nAll the top 10 accounts have loan durations ranging from 36 to 60 months, significantly exceeding the minimum 12-month requirement. The approved amounts for these accounts range from 300,204 to 482,940, with most accounts having 60-month loan terms.",
        "SQL_redbox_without_evidence": "SELECT a.account_id, a.date AS account_opening_date, l.amount AS approved_amount, l.duration AS loan_validity_months\nFROM account_table_1 a\nJOIN loan_table_6 l ON a.account_id = l.account_id\nWHERE l.duration > 12\nAND SUBSTR(a.date, 1, 4) = '1993'\nORDER BY l.amount DESC\nLIMIT 10",
        "is_accurate_without_evidence": 0,
        "redbox_answer_with_evidence": "I was asked to find accounts with loan validity more than 12 months, having the highest approved amount, and with account opening dates in 1993.\n\nTo solve this question, I needed to:\n1. Join the account_table_1 (containing account opening dates) with loan_table_6 (containing loan duration and amounts)\n2. Filter for accounts opened in 1993 (using LIKE '1993%')\n3. Filter for loans with duration > 12 months\n4. Order by loan amount in descending order to get the highest amounts first\n\nHere's the SQL query I used:\n\n```sql\nSELECT a.account_id, a.date AS account_opening_date, l.amount AS loan_amount, l.duration AS loan_duration \nFROM account_table_1 a \nJOIN loan_table_6 l ON a.account_id = l.account_id \nWHERE l.duration > 12 \nAND a.date LIKE '1993%' \nORDER BY l.amount DESC \nLIMIT 10;\n```\n\nThe results show that account 10451, which was opened on 1993-08-29, has the highest loan amount of 482,940 with a loan duration of 60 months. This is followed by account 6034 (opened on 1993-03-19) with a loan amount of 464,520, also with a 60-month duration.\n\nIn fact, among the top 10 accounts meeting our criteria, most have loan durations of either 48 or 60 months, significantly exceeding the minimum requirement of more than 12 months. The loan amounts range from 482,940 down to 300,204 for these top accounts.",
        "SQL_redbox_with_evidence": "SELECT a.account_id, a.date AS account_opening_date, l.amount AS loan_amount, l.duration AS loan_duration \nFROM account_table_1 a \nJOIN loan_table_6 l ON a.account_id = l.account_id \nWHERE l.duration > 12 \nAND a.date LIKE '1993%' \nORDER BY l.amount DESC \nLIMIT 10;",
        "is_accurate_with_evidence": 0
    },
    {
        "question_id": 100,
        "db_id": "financial",
        "question": "Among the account opened, how many female customers who were born before 1950 and stayed in Sokolov?",
        "evidence": "Customers refer to clients; Female refers to gender = 'F'; Names of districts appear in column A2",
        "SQL": "SELECT COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' AND STRFTIME('%Y', T2.birth_date) < '1950' AND T1.A2 = 'Sokolov'",
        "difficulty": "moderate",
        "redbox_answer_without_evidence": "To answer the question about female customers who were born before 1950 and stayed in Sokolov among those who opened accounts, I needed to analyze the database structure and build an appropriate query.\n\nFirst, I identified the relevant tables:\n- `client_table_3`: Contains customer demographics (gender, birth date)\n- `district_table_5`: Contains location information\n- `disp_table_4`: Links clients to their accounts\n\nI determined that Sokolov has a district_id of 30 by querying the district table. Then, I constructed a query to count female customers born before 1950 who lived in Sokolov and had accounts:\n\n```sql\nSELECT COUNT(*) FROM client_table_3 c \nJOIN disp_table_4 d ON c.client_id = d.client_id \nWHERE c.gender = 'F' \nAND c.birth_date < '1950-01-01' \nAND c.district_id = 30\n```\n\nThe query joins the client table with the disposition table (which connects clients to accounts), then applies filters for:\n- Female gender\n- Birth date before January 1, 1950\n- Residence in district 30 (Sokolov)\n\nBased on the results, there are 8 female customers who were born before 1950, stayed in Sokolov, and had bank accounts.",
        "SQL_redbox_without_evidence": "SELECT COUNT(*) FROM client_table_3 c \nJOIN disp_table_4 d ON c.client_id = d.client_id \nWHERE c.gender = 'F' \nAND c.birth_date < '1950-01-01' \nAND c.district_id = 30",
        "is_accurate_without_evidence": 1,
        "redbox_answer_with_evidence": "There are 8 female customers who were born before 1950 and stayed in Sokolov who have opened accounts.\n\nTo arrive at this answer, I constructed a SQL query that:\n1. Joined the client table (client_table_3) with the disposition table (disp_table_4) to connect clients with accounts\n2. Joined with the account table (account_table_1) to ensure these were accounts that had been opened\n3. Joined with the district table (district_table_5) to filter for the Sokolov district\n4. Applied filters for female gender, birth dates before 1950, and the Sokolov district\n5. Used COUNT(DISTINCT client_id) to avoid counting the same client multiple times if they had multiple accounts\n\n```sql\nSELECT COUNT(DISTINCT c.client_id) \nFROM client_table_3 c\nJOIN disp_table_4 d ON c.client_id = d.client_id\nJOIN account_table_1 a ON d.account_id = a.account_id\nJOIN district_table_5 dt ON c.district_id = dt.district_id\nWHERE c.gender = 'F' \nAND c.birth_date < '1950-01-01'\nAND dt.A2 = 'Sokolov'\n```\n\nThe query returned a count of 8, meaning there are exactly 8 female customers who were born before 1950, stayed in the Sokolov district, and had opened accounts in the bank.",
        "SQL_redbox_with_evidence": "SELECT COUNT(DISTINCT c.client_id) \nFROM client_table_3 c\nJOIN disp_table_4 d ON c.client_id = d.client_id\nJOIN account_table_1 a ON d.account_id = a.account_id\nJOIN district_table_5 dt ON c.district_id = dt.district_id\nWHERE c.gender = 'F' \nAND c.birth_date < '1950-01-01'\nAND dt.A2 = 'Sokolov'",
        "is_accurate_with_evidence": 1
    },
    {
        "question_id": 117,
        "db_id": "financial",
        "question": "What is the percentage of loan amount that has been fully paid with no issue.",
        "evidence": "Loan paid with no issue means contract finished, no problems; status = 'A' means contract finished, no problems; Percentage of accounts by condition = [(total(amount) & condition) / (total amount)] * 100%",
        "SQL": "SELECT (CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS REAL) * 100) / SUM(amount) FROM loan",
        "difficulty": "moderate",
        "redbox_answer_without_evidence": "Based on the loan data analysis, approximately 29.77% of loans have status 'A', which most likely represents loans that have been fully paid with no issues. This conclusion is based on conventional banking classification systems where 'A' typically represents accounts in good standing. The analysis was performed using the following query:\n\n```sql\nSELECT \n    status, \n    COUNT(*) as count, \n    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM loan_table_6)) as percentage \nFROM loan_table_6 \nGROUP BY status \nORDER BY status\n```\n\nNote: While I've made an informed assumption that status 'A' represents fully paid loans with no issues, without explicit documentation on what each status code means in this specific database, this interpretation should be verified with the database documentation or administrators.",
        "SQL_redbox_without_evidence": "SELECT \n    status, \n    COUNT(*) as count, \n    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM loan_table_6)) as percentage \nFROM loan_table_6 \nGROUP BY status \nORDER BY status",
        "is_accurate_without_evidence": 0,
        "redbox_answer_with_evidence": "To calculate the percentage of loan amount that has been fully paid with no issue, I needed to analyze the loan data and identify loans with status 'A' (contracts finished with no problems).\n\nHere's my approach:\n1. First, I identified the relevant table (loan_table_6) that contains loan information\n2. Then, I examined the schema to confirm it had the necessary fields: 'amount' for loan values and 'status' to identify problem-free loans\n3. I created a query to calculate:\n   - The sum of amounts for loans with status 'A' (paid with no issues)\n   - The total sum of all loan amounts\n   - The percentage by dividing the first value by the second and multiplying by 100\n\n```sql\nSELECT \n  SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS paid_amount,\n  SUM(amount) AS total_amount,\n  (SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) * 100.0 / SUM(amount)) AS percentage_paid_no_issues\nFROM loan_table_6;\n```\n\nThe results show:\n- Total amount of loans paid with no issues: 18,603,216\n- Total amount of all loans: 103,261,740\n- Percentage of loan amount fully paid with no issues: 18.02%\n\nThis means approximately 18.02% of the total loan amount in the database represents loans that were fully paid without any problems.",
        "SQL_redbox_with_evidence": "SELECT \n  SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS paid_amount,\n  SUM(amount) AS total_amount,\n  (SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) * 100.0 / SUM(amount)) AS percentage_paid_no_issues\nFROM loan_table_6;",
        "is_accurate_with_evidence": 0
    },
    {
        "question_id": 118,
        "db_id": "financial",
        "question": "For loan amount less than USD100,000, what is the percentage of accounts that is still running with no issue.",
        "evidence": "Status = 'C' stands for running contract, ok so far; Percentage of accounts by condition = [(total(amount) & condition) / (total amount)] * 100.",
        "SQL": "SELECT CAST(SUM(status = 'C') AS REAL) * 100 / COUNT(account_id) FROM loan WHERE amount < 100000",
        "difficulty": "moderate",
        "redbox_answer_without_evidence": "To answer the question about the percentage of loan accounts under $100,000 that are still running with no issue, I needed to analyze the loan data in the database.\n\nLooking at the loan_table_6 table, I found that loans have status codes A, B, C, and D. From banking industry standards, typically status A represents accounts in good standing (no issues). This is our best interpretation without explicit documentation of the status codes.\n\nI constructed the following query to calculate the percentage:\n\n```sql\nSELECT status, COUNT(*) as count, \nROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM loan_table_6 WHERE amount < 100000), 2) as percentage \nFROM loan_table_6 \nWHERE amount < 100000 \nGROUP BY status \nORDER BY status;\n```\n\nThe results show:\n- Status A: 139 accounts (45.57%)\n- Status B: 16 accounts (5.25%)\n- Status C: 143 accounts (46.89%)\n- Status D: 7 accounts (2.3%)\n\nInterpreting these results, if we assume that status A represents accounts running with no issues (which is the standard interpretation in most banking systems), then 45.57% of loan accounts with amounts less than $100,000 are still running with no issues.",
        "SQL_redbox_without_evidence": "SELECT status, COUNT(*) as count, \nROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM loan_table_6 WHERE amount < 100000), 2) as percentage \nFROM loan_table_6 \nWHERE amount < 100000 \nGROUP BY status \nORDER BY status;",
        "is_accurate_without_evidence": 0,
        "redbox_answer_with_evidence": "For loan amounts less than USD 100,000, the percentage of accounts that are still running with no issues is 46.89%.\n\nHere's my logic in solving this problem:\n\n1. I identified that the relevant data was in the loan_table_6 table, which contains information about loans including their amount and status.\n2. The question specified that status 'C' represents \"running contract, ok so far\" - meaning accounts with no issues.\n3. I needed to calculate: (number of loans with status 'C' and amount < 100,000) / (total number of loans with amount < 100,000) * 100\n\n```sql\nSELECT \n    COUNT(CASE WHEN status = 'C' THEN 1 END) AS running_contracts,\n    COUNT(*) AS total_loans,\n    ROUND((COUNT(CASE WHEN status = 'C' THEN 1 END) * 100.0 / COUNT(*)), 2) AS percentage\nFROM loan_table_6\nWHERE amount < 100000\n```\n\nInterpreting the results:\n- There are 305 total loans with amounts less than USD 100,000\n- Of these, 143 loans have a status of 'C' (running with no issues)\n- This means 46.89% of loans under USD 100,000 are currently in good standing\n\nTherefore, slightly less than half of all loan accounts with amounts under USD 100,000 are still running without any issues.",
        "SQL_redbox_with_evidence": "SELECT \n    COUNT(CASE WHEN status = 'C' THEN 1 END) AS running_contracts,\n    COUNT(*) AS total_loans,\n    ROUND((COUNT(CASE WHEN status = 'C' THEN 1 END) * 100.0 / COUNT(*)), 2) AS percentage\nFROM loan_table_6\nWHERE amount < 100000",
        "is_accurate_with_evidence": 0
    },
    {
        "question_id": 119,
        "db_id": "financial",
        "question": "For accounts in 1993 with statement issued after transaction, list the account ID, district name and district region.",
        "evidence": "Records about district names could be found in A2; A3 contains the information about regions. 'POPLATEK PO OBRATU' stands for issuance after transaction",
        "SQL": "SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND STRFTIME('%Y', T1.date)= '1993'",
        "difficulty": "moderate",
        "redbox_answer_without_evidence": "To answer this question, I needed to find accounts created in 1993 where statements (represented by card issuance dates) were issued after the account creation date (transaction date).\n\nI constructed a query that:\n1. Joined the account_table_1 with district_table_5 to get district information\n2. Connected accounts to cards through the disp_table_4 (disposition table)\n3. Filtered for accounts created in 1993\n4. Ensured the card issuance date was after the account creation date\n\n```sql\nSELECT a.account_id, d.A2 as district_name, d.A3 as region\nFROM account_table_1 a\nJOIN district_table_5 d ON a.district_id = d.district_id\nJOIN disp_table_4 disp ON a.account_id = disp.account_id\nJOIN card_table_2 c ON disp.disp_id = c.disp_id\nWHERE substr(a.date, 1, 4) = '1993'\nAND c.issued > a.date\nLIMIT 10\n```\n\nThe results show 10 accounts that meet these criteria. Each row contains the account ID, district name, and the region where the district is located. For example:\n- Account 33 is in the Domazlice district in west Bohemia\n- Account 34 is in the Bruntal district in north Moravia\n- Account 66 is in the Rychnov nad Kneznou district in east Bohemia\n\nThe results show accounts spread across various regions of the Czech Republic, including west Bohemia, north Moravia, east Bohemia, central Bohemia, and south Moravia. This indicates that the banking services were utilized across different regions of the country in 1993.",
        "SQL_redbox_without_evidence": "SELECT a.account_id, d.A2 as district_name, d.A3 as region\nFROM account_table_1 a\nJOIN district_table_5 d ON a.district_id = d.district_id\nJOIN disp_table_4 disp ON a.account_id = disp.account_id\nJOIN card_table_2 c ON disp.disp_id = c.disp_id\nWHERE substr(a.date, 1, 4) = '1993'\nAND c.issued > a.date\nLIMIT 10",
        "is_accurate_without_evidence": 0,
        "redbox_answer_with_evidence": "To answer this question, I needed to find accounts from 1993 that had statements issued after transactions, and then provide their account ID, district name and region.\n\nHere's how I approached this:\n1. I identified that account information is stored in `account_table_1`\n2. I found that district names (A2) and regions (A3) are stored in `district_table_5`\n3. The question mentioned \"POPLATEK PO OBRATU\" stands for \"issuance after transaction\", which should be in the frequency field\n4. I needed to filter accounts created in 1993 and join with district information\n\nThe SQL query I constructed:\n```sql\nSELECT a.account_id, d.A2 as district_name, d.A3 as district_region\nFROM account_table_1 a\nJOIN district_table_5 d ON a.district_id = d.district_id\nWHERE a.frequency = 'POPLATEK PO OBRATU' \nAND a.date LIKE '1993%'\nLIMIT 10;\n```\n\nThe results show 10 accounts from 1993 with statement issuance after transaction:\n- Account 66: District Rychnov nad Kneznou in east Bohemia\n- Account 273: District Karlovy Vary in west Bohemia\n- Account 485: District Kutna Hora in central Bohemia\n- Account 539: District Rakovnik in central Bohemia\n- Account 1050: District Hodonin in south Moravia\n- Account 1286: District Zdar nad Sazavou in south Moravia\n- Account 1527: District Tachov in west Bohemia\n- Account 1539: District Hl.m. Praha in Prague\n- Account 1965: District Hodonin in south Moravia (second account from this district)\n- Account 2137: District Kladno in central Bohemia\n\nThese accounts are distributed across different regions of the Czech Republic, with the most representation in central Bohemia and south Moravia.",
        "SQL_redbox_with_evidence": "SELECT a.account_id, d.A2 as district_name, d.A3 as district_region\nFROM account_table_1 a\nJOIN district_table_5 d ON a.district_id = d.district_id\nWHERE a.frequency = 'POPLATEK PO OBRATU' \nAND a.date LIKE '1993%'\nLIMIT 10;",
        "is_accurate_with_evidence": 0
    },
    {
        "question_id": 120,
        "db_id": "financial",
        "question": "From Year 1995 to 2000, who are the accounts holders from 'east Bohemia'. State the account ID the frequency of statement issuance.",
        "evidence": "Accounts holder refers to the person who own this account.",
        "SQL": "SELECT T1.account_id, T1.frequency FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'east Bohemia' AND STRFTIME('%Y', T1.date) BETWEEN '1995' AND '2000'",
        "difficulty": "moderate",
        "redbox_answer_without_evidence": "I was asked to identify account holders from East Bohemia from 1995 to 2000, along with their account IDs and statement frequency.\n\nTo answer this question, I needed to:\n1. Identify which districts were in East Bohemia using the district_table_5\n2. Find accounts opened between 1995-2000 in those districts \n3. Connect those accounts to their holders using the disposition table\n4. Retrieve the frequency of statement issuance for each account\n\n```sql\nSELECT a.account_id, a.frequency, c.client_id, d.type\nFROM account_table_1 a\nJOIN disp_table_4 d ON a.account_id = d.account_id\nJOIN client_table_3 c ON d.client_id = c.client_id\nWHERE a.district_id IN (\n  SELECT district_id FROM district_table_5 WHERE A3 = 'east Bohemia'\n)\nAND a.date BETWEEN '1995-01-01' AND '2000-12-31'\nORDER BY a.account_id\nLIMIT 10;\n```\n\nThe results show that there were several account holders from East Bohemia districts between 1995-2000. The first 10 accounts are:\n\n1. Account 14: Client ID 19 (OWNER) with monthly statement frequency (\"POPLATEK MESICNE\")\n2. Account 76: Client ID 90 (OWNER) with monthly statement frequency\n3. Account 80: Client ID 94 (OWNER) and Client ID 95 (DISPONENT) with monthly statement frequency\n4. Account 84: Client ID 100 (OWNER) with statement after transaction (\"POPLATEK PO OBRATU\")\n5. Account 103: Client ID 124 (OWNER) with monthly statement frequency\n6. Account 131: Client ID 157 (OWNER) with monthly statement frequency\n7. Account 149: Client ID 179 (OWNER) with monthly statement frequency\n8. Account 171: Client ID 207 (OWNER) with monthly statement frequency\n9. Account 174: Client ID 212 (OWNER) with monthly statement frequency\n\nMost accounts have monthly statement frequency (POPLATEK MESICNE), with only one account (84) having statements issued after transactions (POPLATEK PO OBRATU).",
        "SQL_redbox_without_evidence": "SELECT a.account_id, a.frequency, c.client_id, d.type\nFROM account_table_1 a\nJOIN disp_table_4 d ON a.account_id = d.account_id\nJOIN client_table_3 c ON d.client_id = c.client_id\nWHERE a.district_id IN (\n  SELECT district_id FROM district_table_5 WHERE A3 = 'east Bohemia'\n)\nAND a.date BETWEEN '1995-01-01' AND '2000-12-31'\nORDER BY a.account_id\nLIMIT 10;",
        "is_accurate_without_evidence": 0,
        "redbox_answer_with_evidence": "# Account Holders from East Bohemia (1995-2000)\n\n## Logic Behind My Approach\n\nTo identify the account holders from East Bohemia between 1995-2000, I needed to:\n1. Find districts classified as \"east Bohemia\" in the district_table_5\n2. Identify clients living in those districts\n3. Find accounts owned by these clients (not just associated with them)\n4. Filter for accounts opened between 1995-2000\n5. Extract account IDs and statement frequencies\n\n## SQL Query Used\n\n```sql\nSELECT a.account_id, a.frequency, c.client_id, d.A2 as district_name\nFROM account_table_1 a\nJOIN disp_table_4 disp ON a.account_id = disp.account_id\nJOIN client_table_3 c ON disp.client_id = c.client_id\nJOIN district_table_5 d ON c.district_id = d.district_id\nWHERE d.A3 = 'east Bohemia'\nAND disp.type = 'OWNER'\nAND substr(a.date, 1, 4) BETWEEN '1995' AND '2000'\nORDER BY a.account_id\n```\n\n## Results Interpretation\n\nThe query returned 283 account holders from East Bohemia with accounts opened between 1995-2000.\n\nThe East Bohemia region consists of 11 districts: Havlickuv Brod, Hradec Kralove, Chrudim, Jicin, Nachod, Pardubice, Rychnov nad Kneznou, Semily, Svitavy, Trutnov, and Usti nad Orlici.\n\nKey findings about account holders in East Bohemia:\n- Most accounts (approximately 89%) have monthly statement frequency (\"POPLATEK MESICNE\")\n- A small number have weekly statements (\"POPLATEK TYDNE\") or statements after transactions (\"POPLATEK PO OBRATU\")\n- Accounts are distributed across all 11 districts in East Bohemia\n- The account IDs range from 14 to 11317\n\nThis suggests that monthly statement issuance was the standard practice for most account holders in East Bohemia during this period, with only select customers opting for more frequent statement delivery.",
        "SQL_redbox_with_evidence": "SELECT a.account_id, a.frequency, c.client_id, d.A2 as district_name\nFROM account_table_1 a\nJOIN disp_table_4 disp ON a.account_id = disp.account_id\nJOIN client_table_3 c ON disp.client_id = c.client_id\nJOIN district_table_5 d ON c.district_id = d.district_id\nWHERE d.A3 = 'east Bohemia'\nAND disp.type = 'OWNER'\nAND substr(a.date, 1, 4) BETWEEN '1995' AND '2000'\nORDER BY a.account_id",
        "is_accurate_with_evidence": 0
    },
    {
        "question_id": 128,
        "db_id": "financial",
        "question": "List the top nine districts, by descending order, from the highest to the lowest, the number of female account holders.",
        "evidence": "A2 refers to districts; Female refers to gender = 'F'",
        "SQL": "SELECT T2.A2, COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' GROUP BY T2.district_id, T2.A2 ORDER BY COUNT(T1.client_id) DESC LIMIT 9",
        "difficulty": "moderate",
        "redbox_answer_without_evidence": "# Top Nine Districts with the Highest Number of Female Account Holders\n\n## Logic and Approach\nTo answer this question, I needed to:\n1. Identify female clients in the client_table_3\n2. Link these clients to accounts they own (not just have access to) using the disp_table_4\n3. Connect the accounts to their respective districts\n4. Count the unique female account owners per district\n5. Order the results in descending order and limit to the top 9\n\n## SQL Query\n```sql\nSELECT d.district_id, d.A2 as district_name, COUNT(DISTINCT c.client_id) as female_account_holders\nFROM client_table_3 c\nJOIN disp_table_4 disp ON c.client_id = disp.client_id\nJOIN account_table_1 a ON disp.account_id = a.account_id\nJOIN district_table_5 d ON a.district_id = d.district_id\nWHERE c.gender = 'F' AND disp.type = 'OWNER'\nGROUP BY d.district_id, d.A2\nORDER BY female_account_holders DESC\nLIMIT 9\n```\n\n## Results Interpretation\nThe top nine districts with the highest number of female account holders are:\n\n1. **Hl.m. Praha** (Prague) - 276 female account holders\n2. **Karvina** - 79 female account holders\n3. **Ostrava - mesto** - 62 female account holders\n4. **Brno - mesto** - 58 female account holders\n5. **Zlin** - 49 female account holders\n6. **Frydek - Mistek** - 39 female account holders\n7. **Kolin** - 38 female account holders\n8. **Olomouc** - 35 female account holders\n9. **Nachod** - 32 female account holders\n\nPrague (the capital) has significantly more female account holders than any other district, with more than three times as many as the second-ranked district, Karvina.",
        "SQL_redbox_without_evidence": "SELECT d.district_id, d.A2 as district_name, COUNT(DISTINCT c.client_id) as female_account_holders\nFROM client_table_3 c\nJOIN disp_table_4 disp ON c.client_id = disp.client_id\nJOIN account_table_1 a ON disp.account_id = a.account_id\nJOIN district_table_5 d ON a.district_id = d.district_id\nWHERE c.gender = 'F' AND disp.type = 'OWNER'\nGROUP BY d.district_id, d.A2\nORDER BY female_account_holders DESC\nLIMIT 9",
        "is_accurate_without_evidence": 0,
        "redbox_answer_with_evidence": "## Finding the Top Nine Districts with Most Female Account Holders\n\nTo answer this question, I needed to identify:\n1. Which tables contain information about account holders, genders, and districts\n2. How to connect these tables to count female account holders by district\n\n### Logic and Approach\nI found that:\n- `client_table_3` contains gender information and district_id for clients\n- `district_table_5` contains district names in the \"A2\" column as specified in the question\n- `disp_table_4` connects clients to their accounts (showing account ownership)\n\nTo count female account holders by district, I needed to:\n1. Join these three tables\n2. Filter for female clients only (gender = 'F')\n3. Count distinct client IDs grouped by district\n4. Order by this count in descending order\n5. Limit to the top 9 districts\n\n### SQL Query Used\n```sql\nSELECT d.A2 as district_name, COUNT(DISTINCT c.client_id) as female_account_holders\nFROM district_table_5 d\nJOIN client_table_3 c ON d.district_id = c.district_id\nJOIN disp_table_4 disp ON c.client_id = disp.client_id\nWHERE c.gender = 'F'\nGROUP BY d.A2\nORDER BY female_account_holders DESC\nLIMIT 9;\n```\n\n### Results Interpretation\nThe top nine districts with the highest number of female account holders are:\n\n1. Hl.m. Praha: 324 female account holders\n2. Karvina: 88 female account holders\n3. Ostrava - mesto: 84 female account holders\n4. Brno - mesto: 75 female account holders\n5. Zlin: 57 female account holders\n6. Olomouc: 50 female account holders\n7. Frydek - Mistek: 42 female account holders\n8. Kolin: 39 female account holders\n9. Nachod: 37 female account holders\n\nPrague (Hl.m. Praha) has significantly more female account holders than any other district, with nearly four times as many as the second-ranking district.",
        "SQL_redbox_with_evidence": "SELECT d.A2 as district_name, COUNT(DISTINCT c.client_id) as female_account_holders\nFROM district_table_5 d\nJOIN client_table_3 c ON d.district_id = c.district_id\nJOIN disp_table_4 disp ON c.client_id = disp.client_id\nWHERE c.gender = 'F'\nGROUP BY d.A2\nORDER BY female_account_holders DESC\nLIMIT 9;",
        "is_accurate_with_evidence": 1
    },
    {
        "question_id": 194,
        "db_id": "financial",
        "question": "Provide the IDs and age of the client with high level credit card, which is eligible for loans.",
        "evidence": "the credit card is high-level refers to card.type = 'gold'; eligible for loans refers to disp.type = 'OWNER'",
        "SQL": "SELECT T1.client_id, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T3.birth_date) FROM disp AS T1 INNER JOIN card AS T2 ON T2.disp_id = T1.disp_id INNER JOIN client AS T3 ON T1.client_id = T3.client_id WHERE T2.type = 'gold' AND T1.type = 'OWNER'",
        "difficulty": "moderate",
        "redbox_answer_without_evidence": "Based on the database analysis, I found clients who have high level credit cards (gold cards) and are eligible for loans.\n\nTo solve this problem, I had to:\n1. Identify high level credit cards - these are \"gold\" type cards\n2. Find clients who have these gold cards \n3. Determine which of these clients have approved loans (status 'A' or 'C')\n4. Calculate their age based on birth date\n\nHere's the SQL query I constructed:\n\n```sql\nSELECT \n    c.client_id,\n    (CAST(strftime('%Y', 'now') AS INTEGER) - CAST(substr(c.birth_date, 1, 4) AS INTEGER)) AS age\nFROM \n    client_table_3 c\nJOIN \n    disp_table_4 d ON c.client_id = d.client_id\nJOIN \n    card_table_2 card ON d.disp_id = card.disp_id\nJOIN \n    account_table_1 a ON d.account_id = a.account_id\nJOIN \n    loan_table_6 l ON a.account_id = l.account_id\nWHERE \n    card.type = 'gold'\n    AND l.status IN ('A', 'C')\nLIMIT 10\n```\n\nThe results show 10 clients with gold cards who are eligible for loans:\n- Client ID: 1133, Age: 67\n- Client ID: 3414, Age: 78\n- Client ID: 3601, Age: 87\n- Client ID: 5253, Age: 79\n- Client ID: 5978, Age: 81\n- Client ID: 7127, Age: 68\n- Client ID: 7286, Age: 55\n- Client ID: 7683, Age: 79\n- Client ID: 9641, Age: 80\n- Client ID: 9717, Age: 73\n\nThese clients all have gold credit cards (considered high level) and have loans with a status of 'A' or 'C', which indicates they are eligible for loans. The ages of these clients range from 55 to 87 years old.",
        "SQL_redbox_without_evidence": "SELECT \n    c.client_id,\n    (CAST(strftime('%Y', 'now') AS INTEGER) - CAST(substr(c.birth_date, 1, 4) AS INTEGER)) AS age\nFROM \n    client_table_3 c\nJOIN \n    disp_table_4 d ON c.client_id = d.client_id\nJOIN \n    card_table_2 card ON d.disp_id = card.disp_id\nJOIN \n    account_table_1 a ON d.account_id = a.account_id\nJOIN \n    loan_table_6 l ON a.account_id = l.account_id\nWHERE \n    card.type = 'gold'\n    AND l.status IN ('A', 'C')\nLIMIT 10",
        "is_accurate_without_evidence": 0,
        "redbox_answer_with_evidence": "To answer this question, I needed to find clients who meet two specific criteria:\n1. They have a gold credit card (`card_table_2` where `type = 'gold'`)\n2. They are account owners, making them eligible for loans (`disp_table_4` where `type = 'OWNER'`)\n\nI constructed a SQL query joining three tables:\n- `client_table_3` to get client IDs and calculate ages from birth dates\n- `disp_table_4` to find clients who are account owners\n- `card_table_2` to find clients with gold credit cards\n\n```sql\nSELECT \n    c.client_id,\n    (CAST(strftime('%Y', 'now') AS INTEGER) - CAST(strftime('%Y', c.birth_date) AS INTEGER)) AS age\nFROM \n    client_table_3 c\nJOIN \n    disp_table_4 d ON c.client_id = d.client_id\nJOIN \n    card_table_2 cd ON d.disp_id = cd.disp_id\nWHERE \n    cd.type = 'gold'\nAND \n    d.type = 'OWNER'\nLIMIT 10\n```\n\nThe query returned 10 clients who meet both criteria:\n- Client ID: 9, Age: 90 years\n- Client ID: 41, Age: 57 years\n- Client ID: 79, Age: 56 years\n- Client ID: 326, Age: 58 years\n- Client ID: 548, Age: 88 years\n- Client ID: 562, Age: 50 years\n- Client ID: 694, Age: 89 years\n- Client ID: 886, Age: 77 years\n- Client ID: 928, Age: 74 years\n- Client ID: 1067, Age: 73 years\n\nThese clients have gold credit cards and are account owners, making them eligible for loans. Interestingly, most of these clients are seniors, with ages ranging from 50 to 90 years old.",
        "SQL_redbox_with_evidence": "SELECT \n    c.client_id,\n    (CAST(strftime('%Y', 'now') AS INTEGER) - CAST(strftime('%Y', c.birth_date) AS INTEGER)) AS age\nFROM \n    client_table_3 c\nJOIN \n    disp_table_4 d ON c.client_id = d.client_id\nJOIN \n    card_table_2 cd ON d.disp_id = cd.disp_id\nWHERE \n    cd.type = 'gold'\nAND \n    d.type = 'OWNER'\nLIMIT 10",
        "is_accurate_with_evidence": 0
    },
    {
        "question_id": 130,
        "db_id": "financial",
        "question": "How many of the account holders in South Bohemia still do not own credit cards?",
        "evidence": "A3 contains the region names; South Bohemia is one of region names.",
        "SQL": "SELECT COUNT(T3.account_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.client_id = T3.client_id WHERE T1.A3 = 'south Bohemia' AND T3.type != 'OWNER'",
        "difficulty": "moderate",
        "redbox_answer_without_evidence": "To answer the question about how many account holders in South Bohemia still do not own credit cards, I needed to analyze several tables and their relationships:\n\n1. First, I identified South Bohemia districts from the district_table_5, where the region ('A3' column) equals 'south Bohemia'\n2. Then I found clients living in those districts from client_table_3\n3. Next, I identified which of these clients are account owners (not just authorized users) from disp_table_4 \n4. Finally, I determined which of these account owners don't have any associated credit cards from card_table_2\n\nMy approach used a series of Common Table Expressions (CTEs) to make the logic clearer:\n- First CTE identified South Bohemia clients\n- Second CTE identified account holders from those clients\n- Third CTE identified card owners from those clients\n- The main query counted account holders who aren't in the card owners list\n\n```sql\nWITH south_bohemia_clients AS (\n  SELECT c.client_id \n  FROM client_table_3 c\n  JOIN district_table_5 d ON c.district_id = d.district_id\n  WHERE d.A3 = 'south Bohemia'\n),\naccount_holders AS (\n  SELECT DISTINCT disp.client_id\n  FROM disp_table_4 disp\n  JOIN south_bohemia_clients sbc ON disp.client_id = sbc.client_id\n  WHERE disp.type = 'OWNER'\n),\ncard_owners AS (\n  SELECT DISTINCT disp.client_id\n  FROM card_table_2 card\n  JOIN disp_table_4 disp ON card.disp_id = disp.disp_id\n  JOIN south_bohemia_clients sbc ON disp.client_id = sbc.client_id\n)\nSELECT COUNT(*) AS clients_without_cards\nFROM account_holders\nWHERE client_id NOT IN (SELECT client_id FROM card_owners)\n```\n\nBased on the results, there are 297 account holders in South Bohemia who do not own credit cards.",
        "SQL_redbox_without_evidence": "WITH south_bohemia_clients AS (\n  SELECT c.client_id \n  FROM client_table_3 c\n  JOIN district_table_5 d ON c.district_id = d.district_id\n  WHERE d.A3 = 'south Bohemia'\n),\naccount_holders AS (\n  SELECT DISTINCT disp.client_id\n  FROM disp_table_4 disp\n  JOIN south_bohemia_clients sbc ON disp.client_id = sbc.client_id\n  WHERE disp.type = 'OWNER'\n),\ncard_owners AS (\n  SELECT DISTINCT disp.client_id\n  FROM card_table_2 card\n  JOIN disp_table_4 disp ON card.disp_id = disp.disp_id\n  JOIN south_bohemia_clients sbc ON disp.client_id = sbc.client_id\n)\nSELECT COUNT(*) AS clients_without_cards\nFROM account_holders\nWHERE client_id NOT IN (SELECT client_id FROM card_owners)",
        "is_accurate_without_evidence": 0,
        "redbox_answer_with_evidence": "To answer the question about how many account holders in South Bohemia still do not own credit cards, I needed to analyze relationships between several tables in the database.\n\nMy approach was to:\n1. Identify clients from South Bohemia by joining the client_table_3 with district_table_5 where A3 column equals 'south Bohemia'\n2. Find which of these clients are account owners by checking disp_table_4 for records with type='OWNER'\n3. Determine which of these account owners have credit cards by linking through disp_table_4 to card_table_2\n4. Count the account owners who do not appear in the list of those with credit cards\n\n```sql\nWITH south_bohemia_clients AS (\n    SELECT c.client_id\n    FROM client_table_3 c\n    JOIN district_table_5 d ON c.district_id = d.district_id\n    WHERE d.A3 = 'south Bohemia'\n),\naccount_owners AS (\n    SELECT DISTINCT d.client_id\n    FROM disp_table_4 d\n    JOIN south_bohemia_clients sbc ON d.client_id = sbc.client_id\n    WHERE d.type = 'OWNER'\n),\nclients_with_cards AS (\n    SELECT DISTINCT ao.client_id\n    FROM account_owners ao\n    JOIN disp_table_4 d ON ao.client_id = d.client_id\n    JOIN card_table_2 c ON d.disp_id = c.disp_id\n)\nSELECT COUNT(*) as clients_without_cards\nFROM account_owners ao\nWHERE ao.client_id NOT IN (SELECT client_id FROM clients_with_cards)\n```\n\nThe query result shows that 297 account holders in South Bohemia do not own credit cards.",
        "SQL_redbox_with_evidence": "WITH south_bohemia_clients AS (\n    SELECT c.client_id\n    FROM client_table_3 c\n    JOIN district_table_5 d ON c.district_id = d.district_id\n    WHERE d.A3 = 'south Bohemia'\n),\naccount_owners AS (\n    SELECT DISTINCT d.client_id\n    FROM disp_table_4 d\n    JOIN south_bohemia_clients sbc ON d.client_id = sbc.client_id\n    WHERE d.type = 'OWNER'\n),\nclients_with_cards AS (\n    SELECT DISTINCT ao.client_id\n    FROM account_owners ao\n    JOIN disp_table_4 d ON ao.client_id = d.client_id\n    JOIN card_table_2 c ON d.disp_id = c.disp_id\n)\nSELECT COUNT(*) as clients_without_cards\nFROM account_owners ao\nWHERE ao.client_id NOT IN (SELECT client_id FROM clients_with_cards)",
        "is_accurate_with_evidence": 0
    },
    {
        "question_id": 193,
        "db_id": "financial",
        "question": "List all ID and district for clients that can only have the right to issue permanent orders or apply for loans.",
        "evidence": "Only the owner accounts have the right to issue permanent orders or apply for loans",
        "SQL": "SELECT T3.client_id, T2.district_id, T2.A2 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id WHERE T3.type = 'OWNER'",
        "difficulty": "moderate",
        "redbox_answer_without_evidence": "Based on the database structure, I needed to identify clients who can only issue permanent orders or apply for loans, but don't have full ownership privileges.\n\nIn banking systems, there are typically two types of dispositions in relation to accounts:\n1. OWNER - has full rights to an account\n2. DISPONENT - has limited rights, typically only allowed to issue orders or apply for loans\n\nTo answer this question, I identified clients who are only DISPONENT on accounts but never OWNER of any account. These clients would only have the right to issue orders or apply for loans but wouldn't have full ownership privileges.\n\n```sql\nSELECT DISTINCT c.client_id, c.district_id \nFROM client_table_3 c \nJOIN disp_table_4 d ON c.client_id = d.client_id \nWHERE d.type = 'DISPONENT' \nAND c.client_id NOT IN (\n    SELECT client_id FROM disp_table_4 WHERE type = 'OWNER'\n)\nLIMIT 10;\n```\n\nThe results show 10 clients (client IDs: 3, 5, 11, 16, 18, 23, 37, 57, 71, and 74) who are only DISPONENT but never OWNER of any account. These clients come from various districts (district IDs: 1, 5, 57, 21, 76, 7, 70, and 22). These are the clients who can only have the right to issue permanent orders or apply for loans, but don't have full ownership privileges on any account.",
        "SQL_redbox_without_evidence": "SELECT DISTINCT c.client_id, c.district_id \nFROM client_table_3 c \nJOIN disp_table_4 d ON c.client_id = d.client_id \nWHERE d.type = 'DISPONENT' \nAND c.client_id NOT IN (\n    SELECT client_id FROM disp_table_4 WHERE type = 'OWNER'\n)\nLIMIT 10;",
        "is_accurate_without_evidence": 0,
        "redbox_answer_with_evidence": "To answer this question, I needed to find clients who can only issue permanent orders or apply for loans, which according to the question, are only account owners (not disponents).\n\nMy logic in solving this problem:\n1. According to the database schema, the relationship between clients and accounts is stored in the `disp_table_4` table with a \"type\" field indicating if the client is an \"OWNER\" or a \"DISPONENT\"\n2. The question asks for clients who can ONLY have the right to issue permanent orders or apply for loans (which are owner accounts)\n3. This means finding clients who are account owners but never disponents for any account\n4. I needed to join client data with district data to get the requested information (ID and district)\n\n```sql\nSELECT DISTINCT c.client_id, d.district_id \nFROM client_table_3 c\nJOIN disp_table_4 disp ON c.client_id = disp.client_id\nJOIN district_table_5 d ON c.district_id = d.district_id\nWHERE disp.type = 'OWNER'\nAND c.client_id NOT IN (\n    SELECT client_id FROM disp_table_4 WHERE type = 'DISPONENT' AND client_id IS NOT NULL\n)\nLIMIT 10;\n```\n\nThe results show 10 clients (limited by the query) who are account owners but never disponents:\n- Client ID 1 is in district 18\n- Client ID 2 is in district 1\n- Client ID 4 is in district 5\n- Client ID 6 is in district 12\n- Client ID 7 is in district 15\n- Client ID 8 is in district 51\n- Client ID 9 is in district 60\n- Client ID 10 is in district 57\n- Client ID 12 is in district 40\n- Client ID 13 is in district 54\n\nThese clients have the exclusive right to issue permanent orders or apply for loans since they are only owners and never disponents for any account.",
        "SQL_redbox_with_evidence": "SELECT DISTINCT c.client_id, d.district_id \nFROM client_table_3 c\nJOIN disp_table_4 disp ON c.client_id = disp.client_id\nJOIN district_table_5 d ON c.district_id = d.district_id\nWHERE disp.type = 'OWNER'\nAND c.client_id NOT IN (\n    SELECT client_id FROM disp_table_4 WHERE type = 'DISPONENT' AND client_id IS NOT NULL\n)\nLIMIT 10;",
        "is_accurate_with_evidence": 0
    },
    {
        "question_id": 94,
        "db_id": "financial",
        "question": "List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary?",
        "evidence": "Female means gender = 'F'; A11 refers to average salary; Gap = highest average salary - lowest average salary; If the person A's birthdate > B's birthdate, it means that person B is order than person A.",
        "SQL": "SELECT T1.account_id , ( SELECT MAX(A11) - MIN(A11) FROM district ) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T2.district_id = ( SELECT district_id FROM client WHERE gender = 'F' ORDER BY birth_date ASC LIMIT 1 ) ORDER BY T2.A11 DESC LIMIT 1",
        "difficulty": "challenging",
        "redbox_answer_without_evidence": "To answer this question, I needed to find female clients who are the oldest and have the lowest average salary, then calculate the gap between that lowest average salary and the highest average salary.\n\nThe logic behind my approach:\n1. First identify the oldest female clients by sorting birth dates in ascending order\n2. For those clients, determine which ones live in districts with the lowest average salary\n3. Find their account numbers where they are account owners\n4. Calculate the gap between this lowest average salary and the highest average salary in the database\n\n```sql\nWITH oldest_female_clients AS (\n  SELECT \n    c.client_id, \n    c.birth_date,\n    dt.A11 as avg_salary\n  FROM \n    client_table_3 c\n  JOIN \n    district_table_5 dt ON c.district_id = dt.district_id\n  WHERE \n    c.gender = 'F'\n  ORDER BY \n    c.birth_date ASC\n  LIMIT 1\n),\nsalary_stats AS (\n  SELECT \n    MAX(A11) as max_salary\n  FROM district_table_5\n)\nSELECT \n  d.account_id,\n  ofc.birth_date,\n  ofc.avg_salary as lowest_avg_salary,\n  ss.max_salary as highest_avg_salary,\n  ss.max_salary - ofc.avg_salary as salary_gap\nFROM \n  oldest_female_clients ofc\nJOIN \n  disp_table_4 d ON ofc.client_id = d.client_id\nCROSS JOIN \n  salary_stats ss\nWHERE\n  d.type = 'OWNER'\n```\n\nI was unable to execute the query due to technical difficulties, but the query should identify the account numbers of the oldest female clients who also have the lowest average salary (based on their district's average salary represented in column A11). It would also calculate the gap between this lowest average salary and the highest average salary found in any district.\n\nThe query first finds the oldest female clients, joins with district data to get salary information, then finds accounts where these clients are the owners, and finally calculates the salary gap by comparing with the maximum average salary across all districts.",
        "SQL_redbox_without_evidence": "WITH oldest_female_clients AS (\n  SELECT \n    c.client_id, \n    c.birth_date,\n    dt.A11 as avg_salary\n  FROM \n    client_table_3 c\n  JOIN \n    district_table_5 dt ON c.district_id = dt.district_id\n  WHERE \n    c.gender = 'F'\n  ORDER BY \n    c.birth_date ASC\n  LIMIT 1\n),\nsalary_stats AS (\n  SELECT \n    MAX(A11) as max_salary\n  FROM district_table_5\n)\nSELECT \n  d.account_id,\n  ofc.birth_date,\n  ofc.avg_salary as lowest_avg_salary,\n  ss.max_salary as highest_avg_salary,\n  ss.max_salary - ofc.avg_salary as salary_gap\nFROM \n  oldest_female_clients ofc\nJOIN \n  disp_table_4 d ON ofc.client_id = d.client_id\nCROSS JOIN \n  salary_stats ss\nWHERE\n  d.type = 'OWNER'",
        "is_accurate_without_evidence": 0,
        "redbox_answer_with_evidence": "I was asked to find the account numbers of female clients who are oldest and have the lowest average salary, and calculate the gap between this lowest average salary and the highest average salary.\n\nTo solve this problem, I needed to:\n1. Identify female clients (gender = 'F') who are account owners\n2. Find the oldest female clients (those with the earliest birth date)\n3. Among those oldest clients, find those with the lowest average salary (A11)\n4. Identify their account numbers\n5. Calculate the gap between the lowest and highest average salaries\n\n```sql\nWITH female_clients AS (\n    SELECT c.client_id, c.birth_date, c.district_id, dt.A11 as avg_salary\n    FROM client_table_3 c\n    JOIN disp_table_4 d ON c.client_id = d.client_id\n    JOIN district_table_5 dt ON c.district_id = dt.district_id\n    WHERE c.gender = 'F' AND d.type = 'OWNER'\n),\nsalary_stats AS (\n    SELECT MIN(avg_salary) as min_salary, MAX(avg_salary) as max_salary\n    FROM female_clients\n),\noldest_females AS (\n    SELECT client_id, birth_date, avg_salary\n    FROM female_clients\n    WHERE birth_date = (SELECT MIN(birth_date) FROM female_clients)\n),\noldest_lowest_salary_females AS (\n    SELECT client_id, birth_date, avg_salary\n    FROM oldest_females\n    WHERE avg_salary = (SELECT MIN(avg_salary) FROM oldest_females)\n),\naccount_info AS (\n    SELECT d.account_id, o.client_id, o.avg_salary\n    FROM oldest_lowest_salary_females o\n    JOIN disp_table_4 d ON o.client_id = d.client_id\n    WHERE d.type = 'OWNER'\n)\nSELECT \n    a.account_id,\n    a.client_id,\n    a.avg_salary,\n    s.max_salary - s.min_salary as salary_gap\nFROM account_info a\nCROSS JOIN salary_stats s\nLIMIT 10;\n```\n\nThe result shows:\n- The account number is 271\n- This belongs to client ID 328\n- The average salary for this client's district is 12,541\n- The salary gap (difference between the highest and lowest average salary among female clients) is 4,431\n\nThis means that the oldest female client who owns an account and has the lowest average salary in her district has account number 271. The difference between the highest and lowest average salaries across all districts where female clients have accounts is 4,431.",
        "SQL_redbox_with_evidence": "WITH female_clients AS (\n    SELECT c.client_id, c.birth_date, c.district_id, dt.A11 as avg_salary\n    FROM client_table_3 c\n    JOIN disp_table_4 d ON c.client_id = d.client_id\n    JOIN district_table_5 dt ON c.district_id = dt.district_id\n    WHERE c.gender = 'F' AND d.type = 'OWNER'\n),\nsalary_stats AS (\n    SELECT MIN(avg_salary) as min_salary, MAX(avg_salary) as max_salary\n    FROM female_clients\n),\noldest_females AS (\n    SELECT client_id, birth_date, avg_salary\n    FROM female_clients\n    WHERE birth_date = (SELECT MIN(birth_date) FROM female_clients)\n),\noldest_lowest_salary_females AS (\n    SELECT client_id, birth_date, avg_salary\n    FROM oldest_females\n    WHERE avg_salary = (SELECT MIN(avg_salary) FROM oldest_females)\n),\naccount_info AS (\n    SELECT d.account_id, o.client_id, o.avg_salary\n    FROM oldest_lowest_salary_females o\n    JOIN disp_table_4 d ON o.client_id = d.client_id\n    WHERE d.type = 'OWNER'\n)\nSELECT \n    a.account_id,\n    a.client_id,\n    a.avg_salary,\n    s.max_salary - s.min_salary as salary_gap\nFROM account_info a\nCROSS JOIN salary_stats s\nLIMIT 10;",
        "is_accurate_with_evidence": 0
    },
    {
        "question_id": 115,
        "db_id": "financial",
        "question": "For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients?",
        "evidence": "Percentage of the male clients = DIVIDE(COUNT(male clients), COUNT(clients)) * 100; Male refers to gender = 'M', A3 is the region name. A4 contains the information about inhabitants.",
        "SQL": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' GROUP BY T2.A4 ORDER BY T2.A4 DESC LIMIT 1",
        "difficulty": "challenging",
        "redbox_answer_without_evidence": "Agent stopped due to iteration limit or time limit.",
        "SQL_redbox_without_evidence": "None",
        "is_accurate_without_evidence": 0,
        "redbox_answer_with_evidence": "To solve this question, I needed to find the percentage of male clients in the South Bohemia branch with the largest number of inhabitants.\n\nI approached this in two steps:\n1. First, I identified the district in South Bohemia with the highest number of inhabitants.\n2. Then, I calculated the percentage of male clients in that district.\n\n```sql\nWITH SouthBohemiaDistrict AS (\n    SELECT district_id, A3, A4 \n    FROM district_table_5 \n    WHERE A3 = 'south Bohemia' \n    ORDER BY A4 DESC \n    LIMIT 1\n)\nSELECT \n    d.district_id,\n    d.A3 as region_name,\n    d.A4 as inhabitants,\n    COUNT(c.client_id) as total_clients,\n    SUM(CASE WHEN c.gender = 'M' THEN 1 ELSE 0 END) as male_clients,\n    ROUND((SUM(CASE WHEN c.gender = 'M' THEN 1 ELSE 0 END) * 100.0 / \n        CASE WHEN COUNT(c.client_id) > 0 THEN COUNT(c.client_id) ELSE 1 END), 2) as male_percentage\nFROM \n    SouthBohemiaDistrict d\nLEFT JOIN \n    client_table_3 c ON d.district_id = c.district_id\n```\n\nThe query results show that:\n- The district with ID 14 in South Bohemia has the highest number of inhabitants (177,686).\n- This district has a total of 45 clients in the database.\n- Of these clients, 18 are male.\n- The percentage of male clients is 40%.\n\nTherefore, the percentage of male clients in the South Bohemia branch with the largest number of inhabitants is 40%.",
        "SQL_redbox_with_evidence": "WITH SouthBohemiaDistrict AS (\n    SELECT district_id, A3, A4 \n    FROM district_table_5 \n    WHERE A3 = 'south Bohemia' \n    ORDER BY A4 DESC \n    LIMIT 1\n)\nSELECT \n    d.district_id,\n    d.A3 as region_name,\n    d.A4 as inhabitants,\n    COUNT(c.client_id) as total_clients,\n    SUM(CASE WHEN c.gender = 'M' THEN 1 ELSE 0 END) as male_clients,\n    ROUND((SUM(CASE WHEN c.gender = 'M' THEN 1 ELSE 0 END) * 100.0 / \n        CASE WHEN COUNT(c.client_id) > 0 THEN COUNT(c.client_id) ELSE 1 END), 2) as male_percentage\nFROM \n    SouthBohemiaDistrict d\nLEFT JOIN \n    client_table_3 c ON d.district_id = c.district_id",
        "is_accurate_with_evidence": 0
    },
    {
        "question_id": 125,
        "db_id": "financial",
        "question": "For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996.",
        "evidence": "Unemployment increment rate in percentage = [(unemployment rate 2016 - unemployment rate 2015) / unemployment rate 2015] * 100; unemployment rate 2015 appears in the A12; unemployment rate 2016 appears in the A13; Loan contracts which are still running where client are in debt can be presented as status = 'D'",
        "SQL": "SELECT CAST((T3.A13 - T3.A12) AS REAL) * 100 / T3.A12 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status = 'D'",
        "difficulty": "challenging",
        "redbox_answer_without_evidence": "Based on my analysis of the database, I constructed a query to find districts with running loans in debt status and calculated their unemployment rate changes.\n\n```sql\nSELECT \n    d.district_id,\n    d.A2 AS district_name,\n    d.A3 AS region,\n    d.A12 AS unemployment_1995,\n    d.A13 AS unemployment_1996,\n    ROUND(((d.A13 - d.A12) / d.A12) * 100, 2) AS unemployment_increase_percent\nFROM \n    loan_table_6 l\nJOIN \n    account_table_1 a ON l.account_id = a.account_id\nJOIN \n    district_table_5 d ON a.district_id = d.district_id\nWHERE \n    l.status = 'B' -- Status B indicates running loans with debt problems\nGROUP BY \n    d.district_id, d.A2, d.A3, d.A12, d.A13\nORDER BY \n    unemployment_increase_percent DESC\nLIMIT 10;\n```\n\nLooking at the loan table data, I observed status codes (A, B) where 'B' appears to represent running loans with debt issues. The columns A12 and A13 in the district table contain decimal values that increase between 1995 and 1996, indicating they represent unemployment rates.\n\nThe query joins loan data with account and district information to calculate the percentage increase in unemployment for each district where clients have active loans with debt problems. This provides insight into potential correlations between economic conditions (rising unemployment) and loan repayment difficulties.",
        "SQL_redbox_without_evidence": "SELECT \n    d.district_id,\n    d.A2 AS district_name,\n    d.A3 AS region,\n    d.A12 AS unemployment_1995,\n    d.A13 AS unemployment_1996,\n    ROUND(((d.A13 - d.A12) / d.A12) * 100, 2) AS unemployment_increase_percent\nFROM \n    loan_table_6 l\nJOIN \n    account_table_1 a ON l.account_id = a.account_id\nJOIN \n    district_table_5 d ON a.district_id = d.district_id\nWHERE \n    l.status = 'B' -- Status B indicates running loans with debt problems\nGROUP BY \n    d.district_id, d.A2, d.A3, d.A12, d.A13\nORDER BY \n    unemployment_increase_percent DESC\nLIMIT 10;",
        "is_accurate_without_evidence": 0,
        "redbox_answer_with_evidence": "I was asked to find districts with loans that are still running where clients are in debt (status 'D') and calculate the percentage unemployment rate increment from 1995 to 1996.\n\nTo solve this problem, I needed to:\n1. Join the loan_table_6 to account_table_1 to get district information\n2. Join account_table_1 to district_table_5 to get unemployment rates\n3. Filter loans where status is 'D' (indicating clients in debt with running loans)\n4. Calculate the unemployment rate increase percentage using the formula:\n   ((unemployment rate 1996 - unemployment rate 1995) / unemployment rate 1995) * 100\n5. Group by district to avoid duplicate entries\n\nHere's the SQL query I used:\n\n```sql\nSELECT \n    d.district_id,\n    d.A2 AS district_name,\n    d.A3 AS region,\n    d.A12 AS unemployment_rate_1995,\n    d.A13 AS unemployment_rate_1996,\n    ((d.A13 - d.A12) / d.A12) * 100 AS unemployment_rate_increase_percentage\nFROM district_table_5 d\nJOIN account_table_1 a ON d.district_id = a.district_id\nJOIN loan_table_6 l ON a.account_id = l.account_id\nWHERE l.status = 'D'\nGROUP BY d.district_id, d.A2, d.A3, d.A12, d.A13\nORDER BY unemployment_rate_increase_percentage DESC\nLIMIT 10;\n```\n\nThe results show that:\n\n1. Prague (Hl.m. Praha) had the highest unemployment rate increase at approximately 115% (from 0.2% to 0.43%)\n2. Hradec Kralove had the second highest increase at 47.06% (from 1.7% to 2.5%)\n3. Zlin was third with 44.38% (from 1.6% to 2.31%)\n\nInterestingly, although Prague had the highest percentage increase, its absolute unemployment rates were still the lowest among all districts in the results (starting at 0.2% and rising to 0.43%). The districts with the highest absolute unemployment rates in 1996 among these results were Kutna Hora (4.02%) and Chrudim (3.76%).\n\nAll these districts had clients with loans in status 'D' (in debt with running loans) during the analyzed period.",
        "SQL_redbox_with_evidence": "SELECT \n    d.district_id,\n    d.A2 AS district_name,\n    d.A3 AS region,\n    d.A12 AS unemployment_rate_1995,\n    d.A13 AS unemployment_rate_1996,\n    ((d.A13 - d.A12) / d.A12) * 100 AS unemployment_rate_increase_percentage\nFROM district_table_5 d\nJOIN account_table_1 a ON d.district_id = a.district_id\nJOIN loan_table_6 l ON a.account_id = l.account_id\nWHERE l.status = 'D'\nGROUP BY d.district_id, d.A2, d.A3, d.A12, d.A13\nORDER BY unemployment_rate_increase_percentage DESC\nLIMIT 10;",
        "is_accurate_with_evidence": 0
    },
    {
        "question_id": 149,
        "db_id": "financial",
        "question": "Please list the account types that are not eligible for loans, and the average income of residents in the district where the account is located exceeds $8000 but is no more than $9000.",
        "evidence": "A11 represents the average salary; Salary and income share the similar meanings; when the account type = 'OWNER', it's eligible for loans",
        "SQL": "SELECT T3.type FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.type != 'OWNER' AND T1.A11 BETWEEN 8000 AND 9000",
        "difficulty": "challenging",
        "redbox_answer_without_evidence": "# Account Types Not Eligible for Loans in Districts with Average Income Between $8000-$9000\n\n## Logic and Approach\nTo answer this question, I needed to:\n1. Identify account types (from `disp_table_4`) that have no associated loans\n2. Filter these to only include accounts in districts with average income between $8000-$9000\n3. Join multiple tables to connect accounts to their districts and check loan eligibility\n\n## SQL Query Used\n```sql\nSELECT DISTINCT d.type AS account_type, dist.A11 AS avg_income, dist.district_id\nFROM disp_table_4 d\nJOIN account_table_1 a ON d.account_id = a.account_id\nJOIN district_table_5 dist ON a.district_id = dist.district_id\nWHERE dist.A11 > 8000 AND dist.A11 <= 9000\nAND d.account_id NOT IN (SELECT DISTINCT account_id FROM loan_table_6)\n```\n\n## Results Interpretation\nThe query results show that there are two account types not eligible for loans in districts with average income between $8000-$9000:\n\n1. **OWNER** accounts\n2. **DISPONENT** accounts\n\nThese account types appear across multiple districts (district IDs 2, 3, 6, 9, 12, 13, etc.) where the average income falls between $8000-$9000. \n\nIn the banking context, \"OWNER\" typically refers to the primary account holder, while \"DISPONENT\" often refers to someone who has authorization to access or manage the account but isn't the primary owner.",
        "SQL_redbox_without_evidence": "SELECT DISTINCT d.type AS account_type, dist.A11 AS avg_income, dist.district_id\nFROM disp_table_4 d\nJOIN account_table_1 a ON d.account_id = a.account_id\nJOIN district_table_5 dist ON a.district_id = dist.district_id\nWHERE dist.A11 > 8000 AND dist.A11 <= 9000\nAND d.account_id NOT IN (SELECT DISTINCT account_id FROM loan_table_6)",
        "is_accurate_without_evidence": 0,
        "redbox_answer_with_evidence": "Based on the database analysis, the only account type that is not eligible for loans in districts where the average income is between $8000 and $9000 is **DISPONENT**.\n\n### Logic and approach:\nI needed to find account types that:\n1. Are not eligible for loans (meaning any type except 'OWNER', since the question specified OWNER accounts are eligible)\n2. Are in districts where average income (A11 column) is between $8000-$9000\n\nTo solve this, I joined three tables:\n- `disp_table_4` which contains account types\n- `account_table_1` which links accounts to districts\n- `district_table_5` which contains district income information (A11 column)\n\nThen I filtered for non-OWNER accounts in districts with incomes above $8000 but not exceeding $9000.\n\n### SQL query used:\n```sql\nSELECT DISTINCT d.type\nFROM disp_table_4 d\nJOIN account_table_1 a ON d.account_id = a.account_id\nJOIN district_table_5 dt ON a.district_id = dt.district_id\nWHERE d.type != 'OWNER'\nAND dt.A11 > 8000 AND dt.A11 <= 9000\nORDER BY d.type\n```\n\n### Interpretation:\nThe results show that \"DISPONENT\" is the only account type that meets these criteria. This means that people with DISPONENT type accounts in districts with average incomes between $8000-$9000 are not eligible for loans, while OWNER accounts in the same districts would be eligible.",
        "SQL_redbox_with_evidence": "SELECT DISTINCT d.type\nFROM disp_table_4 d\nJOIN account_table_1 a ON d.account_id = a.account_id\nJOIN district_table_5 dt ON a.district_id = dt.district_id\nWHERE d.type != 'OWNER'\nAND dt.A11 > 8000 AND dt.A11 <= 9000\nORDER BY d.type",
        "is_accurate_with_evidence": 0
    },
    {
        "question_id": 169,
        "db_id": "financial",
        "question": "What was the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997?",
        "evidence": "Growth rate = (sum of amount_1997 - sum of amount_1996) / (sum of amount_1996) * 100%; Male refers to gender = 'M'",
        "SQL": "SELECT CAST((SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1997' THEN T1.amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T3.account_id = T2.account_id INNER JOIN client AS T4 ON T4.client_id = T3.client_id WHERE T4.gender = 'M' AND T3.type = 'OWNER'",
        "difficulty": "challenging",
        "redbox_answer_without_evidence": "The growth rate of the total amount of loans across all accounts for male clients between 1996 and 1997 was 25.36%.\n\nTo answer this question, I needed to:\n1. Connect loan data with account and client information\n2. Filter for only male clients\n3. Calculate total loan amounts for 1996 and 1997\n4. Compute the percentage growth between these years\n\nMy approach was to join three tables:\n- loan_table_6 (contains loan amounts and dates)\n- disp_table_4 (links accounts to clients)\n- client_table_3 (contains gender information)\n\nThen I filtered for male clients and loans issued in either 1996 or 1997, and calculated the growth percentage.\n\n```sql\nSELECT \n    SUM(CASE WHEN SUBSTR(l.date, 1, 4) = '1996' THEN l.amount ELSE 0 END) AS total_1996,\n    SUM(CASE WHEN SUBSTR(l.date, 1, 4) = '1997' THEN l.amount ELSE 0 END) AS total_1997,\n    ROUND(((SUM(CASE WHEN SUBSTR(l.date, 1, 4) = '1997' THEN l.amount ELSE 0 END) - \n            SUM(CASE WHEN SUBSTR(l.date, 1, 4) = '1996' THEN l.amount ELSE 0 END)) * 100.0 / \n            NULLIF(SUM(CASE WHEN SUBSTR(l.date, 1, 4) = '1996' THEN l.amount ELSE 0 END), 0)), 2) AS growth_rate_percent\nFROM loan_table_6 l\nJOIN disp_table_4 d ON l.account_id = d.account_id\nJOIN client_table_3 c ON d.client_id = c.client_id\nWHERE c.gender = 'M'\nAND SUBSTR(l.date, 1, 4) IN ('1996', '1997')\n```\n\nThe results show that:\n- Total loans to male clients in 1996: 12,553,044 (currency units)\n- Total loans to male clients in 1997: 15,736,752 (currency units)\n- Growth rate: 25.36%\n\nThis indicates a significant increase of over 25% in the total loan amount for male clients from 1996 to 1997.",
        "SQL_redbox_without_evidence": "SELECT \n    SUM(CASE WHEN SUBSTR(l.date, 1, 4) = '1996' THEN l.amount ELSE 0 END) AS total_1996,\n    SUM(CASE WHEN SUBSTR(l.date, 1, 4) = '1997' THEN l.amount ELSE 0 END) AS total_1997,\n    ROUND(((SUM(CASE WHEN SUBSTR(l.date, 1, 4) = '1997' THEN l.amount ELSE 0 END) - \n            SUM(CASE WHEN SUBSTR(l.date, 1, 4) = '1996' THEN l.amount ELSE 0 END)) * 100.0 / \n            NULLIF(SUM(CASE WHEN SUBSTR(l.date, 1, 4) = '1996' THEN l.amount ELSE 0 END), 0)), 2) AS growth_rate_percent\nFROM loan_table_6 l\nJOIN disp_table_4 d ON l.account_id = d.account_id\nJOIN client_table_3 c ON d.client_id = c.client_id\nWHERE c.gender = 'M'\nAND SUBSTR(l.date, 1, 4) IN ('1996', '1997')",
        "is_accurate_without_evidence": 0,
        "redbox_answer_with_evidence": "To answer this question, I needed to calculate the loan growth rate for male clients between 1996 and 1997.\n\n### My Logic:\n1. First, I identified the relevant tables by examining the database schema:\n   - `loan_table_6` (contains loan amounts and dates)\n   - `client_table_3` (contains gender information)\n   - `disp_table_4` (connects clients to accounts)\n\n2. I then created a query that:\n   - Joins these tables to connect loans to male clients\n   - Uses conditional SUM calculations to separately total loan amounts for 1996 and 1997\n   - Filters for only male clients (gender = 'M')\n\n```sql\nSELECT \n  SUM(CASE WHEN SUBSTR(l.date, 1, 4) = '1996' THEN l.amount ELSE 0 END) as total_1996,\n  SUM(CASE WHEN SUBSTR(l.date, 1, 4) = '1997' THEN l.amount ELSE 0 END) as total_1997\nFROM loan_table_6 l\nJOIN disp_table_4 d ON l.account_id = d.account_id\nJOIN client_table_3 c ON d.client_id = c.client_id\nWHERE c.gender = 'M'\n```\n\n### Results:\n- Total loan amount for male clients in 1996: 12,553,044\n- Total loan amount for male clients in 1997: 15,736,752\n\n### Growth Rate Calculation:\nGrowth rate = (sum of amount_1997 - sum of amount_1996) / (sum of amount_1996) * 100%\nGrowth rate = (15,736,752 - 12,553,044) / 12,553,044 * 100%\nGrowth rate = 3,183,708 / 12,553,044 * 100%\nGrowth rate = 25.36%\n\nTherefore, the growth rate of the total amount of loans across all accounts for male clients between 1996 and 1997 was 25.36%.",
        "SQL_redbox_with_evidence": "SELECT \n  SUM(CASE WHEN SUBSTR(l.date, 1, 4) = '1996' THEN l.amount ELSE 0 END) as total_1996,\n  SUM(CASE WHEN SUBSTR(l.date, 1, 4) = '1997' THEN l.amount ELSE 0 END) as total_1997\nFROM loan_table_6 l\nJOIN disp_table_4 d ON l.account_id = d.account_id\nJOIN client_table_3 c ON d.client_id = c.client_id\nWHERE c.gender = 'M'",
        "is_accurate_with_evidence": 0
    },
    {
        "question_id": 173,
        "db_id": "financial",
        "question": "How often does account number 3 request an account statement to be released? What was the aim of debiting 3539 in total?",
        "evidence": "k_symbol refers to the purpose of payments",
        "SQL": "SELECT T1.frequency, T2.k_symbol FROM account AS T1 INNER JOIN (SELECT account_id, k_symbol, SUM(amount) AS total_amount FROM `order` GROUP BY account_id, k_symbol) AS T2 ON T1.account_id = T2.account_id WHERE T1.account_id = 3 AND T2.total_amount = 3539",
        "difficulty": "challenging",
        "redbox_answer_without_evidence": "After analyzing the database, I can provide the following answers:\n\n1. **How often does account number 3 request an account statement to be released?**\n   \n   Based on the data available in the database, I cannot definitively determine how often account number 3 requests account statements. The database contains transaction information in the `order_table_7` table, but there is no specific transaction type that clearly indicates account statement requests. The transaction types I found (SIPO, UVER, POJISTNE, LEASING) don't appear to represent statement requests.\n\n2. **What was the aim of debiting 3539 in total?**\n   \n   The SQL query I used to find this information was:\n   ```sql\n   SELECT k_symbol, amount FROM order_table_7 WHERE account_id = 3\n   ```\n   \n   This revealed that the 3539 debit has a k_symbol of 'POJISTNE'. In Czech banking terminology, 'POJISTNE' typically refers to insurance payments. Therefore, the aim of debiting 3539 in total was most likely for an insurance payment.\n\nThe database contains limited information about the specific nature of these transactions, but based on the transaction type code (k_symbol), we can reasonably conclude that the 3539 debit was for insurance purposes.",
        "SQL_redbox_without_evidence": "SELECT k_symbol, amount FROM order_table_7 WHERE account_id = 3\n  ",
        "is_accurate_without_evidence": 0,
        "redbox_answer_with_evidence": "Based on the database analysis, I found that:\n\n1. Regarding how often account number 3 requests account statements: The database doesn't contain explicit information about account statement requests. The available data shows transactions associated with account 3, but not specifically statement requests.\n\n2. Regarding the purpose of debiting 3539 in total: I found that the total amount of 3539 was debited from account number 3 with the k_symbol \"POJISTNE\". \n\n```sql\nSELECT k_symbol, COUNT(*) as count, SUM(amount) as total_amount\nFROM order_table_7\nWHERE account_id = 3\nGROUP BY k_symbol;\n```\n\nThe query results show that:\n- There was exactly 1 transaction with k_symbol \"POJISTNE\" totaling 3539.0\n- The k_symbol \"POJISTNE\" refers to insurance payments in Czech (the database appears to use Czech terminology)\n\nTherefore, the aim of debiting 3539 in total from account number 3 was for insurance payments (POJISTNE). The account also had other transactions: one unlabeled transaction for 327.0 and one SIPO (utility payment) transaction for 1135.0.",
        "SQL_redbox_with_evidence": "SELECT k_symbol, COUNT(*) as count, SUM(amount) as total_amount\nFROM order_table_7\nWHERE account_id = 3\nGROUP BY k_symbol;",
        "is_accurate_with_evidence": 0
    }
]